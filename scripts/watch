#!/usr/bin/env python2

from distutils import version
from optparse import OptionParser
from socket import timeout
import urlparse
import urllib2
import sys
import re

def process_recursive(url, pattern, options, final):
	uri = urlparse.urlparse(url)
	result = None

	if uri.scheme == 'ftp':
		url = url + '/'

	if options.verbose > 1:
		print 'opening URL', url, '(%s)' % pattern

	try:
		req = urllib2.Request(url)
		req.add_header('Accept', '*/*')
		content = urllib2.urlopen(req, timeout=10)
	except timeout:
		print "Timeout retrieving %s" % url
		return None
	except Exception as err:
		print "Failed to retrieve %s: %s" % (url, err)
		return None

	for line in content:
		try:
			line = line.strip()
		except timeout:
			print "Timeout reading %s" % (url)
			return None

		if uri.scheme == 'ftp':
			regex = re.compile('(\S+)$', re.IGNORECASE)
		else:
			# If the match is an absolute path or URL try to match the whole
			# href, otherwise strip all path components.
			if '://' in pattern or pattern[0] == '/':
				regex = re.compile('href=[\'"]([^\'"]+?)[\'"]', \
							re.IGNORECASE)
			else:
				regex = re.compile('href=[\'"](?:[^\'"]*/)?([^\'"]+?)[\'"]', \
							re.IGNORECASE)

		matches = regex.findall(line)
		if not matches:
			continue

		for match in matches:
			ref = re.match(pattern, match)
			if not ref:
				continue

			if final:
				if options.verbose > 2:
					print '  found match:', ref.group(0)

				match = ref.group(1)
			else:
				match = ref.group(0)

			ver = version.LooseVersion(match)
			if ver:
				if result:
					if ver not in result:
						result.append(ver)
				else:
					result = [ ver ]

	if result:
		return sorted(result)

	return None

def process_path(base, path, pattern, options):
	paths = []

	if options.verbose > 2:
		print 'trying', base + path, 'with pattern', pattern

	match = re.search('\(.*\)', pattern)
	if match:
		versions = process_recursive(base + path, pattern, options,
				False)
		if versions is not None:
			versions.sort()

			for version in versions:
				paths.append(path + '/' + str(version))
	else:
		paths = [ path + '/' + pattern ]

	if not options.all:
		return paths[-1:]

	return paths

def collect_paths(base, dirs, options):
	paths = [ '' ]

	for pattern in dirs:
		if options.verbose > 1:
			print '  pattern:', pattern

		for path in paths:
			if options.verbose > 1:
				print '    path:', path

			paths = process_path(base, path, pattern, options)

	return paths

def process_line(line, options):
	pattern = None
	result = []

	parts = line.split()
	site = parts[0]

	if len(parts) > 1:
		pattern = parts[1]

	if options.verbose > 0:
		print 'Site:', site

	match = re.match('^(\w+://[^/]+)/(.*)$', site);
	if options.verbose > 1:
		print 'groups:', len(match.groups())
		for group in match.groups():
			print '  group:', group

	base = match.group(1)
	if base == 'http://sf.net':
		base = 'https://qa.debian.org/watch/sf.php'
		if options.verbose > 0:
			print 'using redirector:', base

	dirs = match.group(2).split('/')

	if not pattern:
		paths = collect_paths(base, dirs[0:-1], options)
		pattern = dirs[-1]
	else:
		paths = collect_paths(base, dirs, options)

	for path in paths:
		versions = process_recursive(base + path, pattern, options,
				True)
		if versions is not None:
			result.extend(versions)

	return result

def process_file(filename, options):
	result = None

	if options.verbose > 0:
		print 'Processing file', filename

	f = open(filename, 'r')

	for line in f:
		line = line.strip().lstrip()

		match = re.match('version=(\d+)', line)
		if match:
			if match.group(1) != '3':
				print 'Invalid version %s: Only version 3 ' \
						'watchfiles supported.' % \
						match.group(1)
				sys.exit(1)

			continue

		match = re.match('^\s*$', line)
		if match:
			continue

		versions = process_line(line, options)
		if versions:
			if result:
				result.extend(versions)
			else:
				result = versions

	if result:
		return sorted(result)

	return None

def main():
	usage = 'usage: %prog [options] WATCHFILE'
	parser = OptionParser(usage=usage)
	parser.add_option('-c', '--current', type='string', dest='version',
			help='specify current version number')
	parser.add_option('-a', '--all', action='store_true', dest='all',
			help='show all available versions')
	parser.add_option('-v', '--verbose', action='count', dest='verbose',
			help='increase verbosity level')
	parser.add_option('-q', '--quiet', action='count', dest='quiet',
			help='decrease verbosity level')

	(options, args) = parser.parse_args()

	if len(args) != 1:
		parser.print_help()
		sys.exit(1)

	versions = process_file(args[0], options)
	if not versions:
		sys.exit(2)

	if options.version:
		current = version.LooseVersion(options.version)
		latest = current

		for ver in versions:
			if ver > latest:
				latest = ver

		if current != latest:
			if not options.quiet:
				print 'New upstream version:', latest
			else:
				print latest

			sys.exit(1)
	else:
		if options.all:
			version_list = map(lambda ver: str(ver), versions)
			print 'Available upstream versions:', \
					str.join(', ', version_list)
		else:
			if not options.quiet:
				print 'Latest upstream version:', versions[-1]
			else:
				print versions[-1]

if __name__ == '__main__':
	main()
