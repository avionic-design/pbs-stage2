LOG = $(if $(PBUILD_VERBOSE),,> /dev/null 2>&1)

src := $(obj)
PHONY := all
all:

include scripts/pbuild.mk

pbuild-dir := $(if $(filter /%,$(src)),$(src),$(srctree)/packages/$(src))
ifndef PACKAGE
  include $(if $(wildcard $(pbuild-dir)/pbuild), $(pbuild-dir)/pbuild, $(pbuild-dir)/Makefile)
endif

PACKAGE_FULLNAME = $(PACKAGE)-$(VERSION)
buildtree ?= $(tmptree)/$(package)
pkgtree ?= $(buildtree)/$(PACKAGE_FULLNAME)
export buildtree pkgtree

fetch := -f scripts/Makefile.pkg download

include scripts/Makefile.lib

ifndef obj
  $(warning pbuild: Makefile.build is included improperly)
endif

all: build
	@:

ALLFILES := $(TARBALLS)
package-sources = $(addprefix $(package)/, $(TARBALLS))

stamp = $(addsuffix -$(1), $(addprefix $(tmptree)/stamps/, $(2)))
makestamp = $(Q)mkdir -p $(dir $@) && touch $@
package-hook = $(if $(wildcard $(call stamp,$(1),$(package))),,package-$(1))

package = $(obj)
ifdef package
PHONY += clean
clean:

PHONY += fetch
fetch: $(call stamp,fetch,$(package))

PHONY += checksum
checksum: $(call stamp,checksum,$(package))

PHONY += extract
extract: $(call stamp,extract,$(package))

PHONY += patch
patch: $(call stamp,patch,$(package))

PHONY += configure
configure: $(call stamp,configure,$(package))

PHONY += build
build: $(call stamp,build,$(package))

PHONY += install
install: $(call stamp,install,$(package))

# stamp targets
$(call stamp,fetch,$(package)): $(stampdir) $(addprefix download/, $(TARBALLS))
	$(makestamp)

$(call stamp,checksum,$(package)): $(stampdir) $(call stamp,$(checksum),$(TARBALLS))
	$(makestamp)

$(call stamp,extract,$(package)): $(stampdir) $(buildtree) $(call stamp,checksum,$(package)) $(call stamp,extract,$(package-sources)) $(call package-hook,extract)
	$(makestamp)

$(call stamp,patch,$(package)): $(stampdir) $(call stamp,extract,$(package)) $(call package-hook,patch) $(call stamp,apply,$(package))
	$(makestamp)

$(call stamp,configure,$(package)): $(stampdir) $(call stamp,patch,$(package)) $(call package-hook,configure)
	$(makestamp)

$(call stamp,build,$(package)): $(stampdir) $(call stamp,configure,$(package)) $(call package-hook,build)
	$(makestamp)

$(call stamp,install,$(package)): $(stampdir) $(call stamp,build,$(package)) $(call package-hook,install)
	$(makestamp)

# dummy targets
package-extract::
package-patch::
else
  $(warning package not defined)
endif

download/%:
	@for url in $(addsuffix /$*, $(subst ://,//,$(LOCATION))); do \
		$(MAKE) $(fetch)=$$url download && break; \
	done

# ----- downloading targets --------------------------------------------------

ifdef download
PHONY += download
download: $(subst ://,//,$(download))

quiet_cmd_download_http = HTTP      $(subst //,://,$@)
      cmd_download_http = wget -P download $(subst //,://,$@) $(LOG)

http//%:
	$(call cmd,download_http)

quiet_cmd_download_ftp = FTP       $(subst //,://,$@)
      cmd_download_ftp = wget -P download $(subst //,://,$@) $(LOG)

ftp//%:
	$(call cmd,download_ftp)
endif

# ----- checksumming targets -------------------------------------------------

quiet_cmd_check_md5 = MD5       $*
      cmd_check_md5 = grep $* checksums/md5 | md5sum -c $(LOG) && touch $@

$(stampdir)/%-md5: download/%
	$(call cmd,check_md5)

quiet_cmd_check_sha1 = SHA1      $*
      cmd_check_sha1 = grep $* checksums/sha1 | sha1sum -c $(LOG) && touch $@

$(stampdir)/%-sha1: download/%
	$(call cmd,check_sha1)

quiet_cmd_check_sha256 = SHA256    $*
      cmd_check_sha256 = grep $* checksums/sha256 | sha256sum -c $(LOG) && touch $@

$(stampdir)/%-sha256: download/%
	$(call cmd,check_sha256)

##
## from here on, targets are platform-dependent
##

# ----- extract targets ------------------------------------------------------

tarball = $(srctree)/download/$(patsubst %-extract,%,$(@F))

$(stampdir)/%.tar.gz-extract:
	$(call cmd,extract_tar_gz,$(tarball))
	$(makestamp)

$(stampdir)/%.tar.bz2-extract:
	$(call cmd,extract_tar_bz2,$(tarball))
	$(makestamp)

# ----- patch targets --------------------------------------------------------

$(stampdir)/$(package)-apply: patchdir = $(srctree)/packages/$(package)/patches
$(stampdir)/$(package)-apply:
	$(if $(wildcard $(patchdir)/series),$(call cmd,quilt_patch),)
	$(makestamp)

# ----- configure targets ----------------------------------------------------

quiet_pkg_configure_autotools = CONFIG  $*
      pkg_configure_autotools = cd $* && $(CONFIGURE_ENV) ./configure \
				$(CONFIGURE_ARGS)

quiet_pkg_configure_make = CONFIG  $*
      pkg_configure_make = cd $* && $(CONFIGURE_ENV) make $(CONFIGURE_ARGS)

configure-%/configure:
	$(call cmd,pkg_configure_autotools)

configure-%/Makefile:
	$(call cmd,pkg_configure_make)

# ----- build targets --------------------------------------------------------

quiet_pkg_build_make = BUILD   $*
      pkg_build_make = cd $* && $(BUILD_ENV) make $(BUILD_ARGS)

build-%/Makefile:
	$(call cmd,pkg_build_make)

# ----- install targets ------------------------------------------------------

quiet_pkg_install_make = INSTALL $*
      pkg_install_make = cd $* $(INSTALL_ENV) make $(INSTALL_ARGS)

install-%/Makefile:
	$(call cmd,pkg_install_make)

# ----- clean targets --------------------------------------------------------

$(buildtree):
	$(call cmd,mkdir_p)

$(stampdir):
	$(call cmd,mkdir_p)

PHONY += FORCE
FORCE:

.PHONY: $(PHONY)

# vim: ft=make

