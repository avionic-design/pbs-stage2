
CSUM = sha256
BUILDDIR = $(PLATFORM)/build

src := $(obj)
PHONY := all
all:

include scripts/pbuild.mk

pbuild-dir := $(if $(filter /%,$(src)),$(src),$(srctree)/$(src))
ifndef PACKAGE
  include $(if $(wildcard $(pbuild-dir)/pbuild), $(pbuild-dir)/pbuild, $(pbuild-dir)/Makefile)
endif

PACKAGE_FULLNAME = $(PACKAGE)-$(VERSION)

fetch := -f scripts/Makefile.pkg download

include scripts/Makefile.lib

ifndef obj
  $(warning pbuild: Makefile.build is included improperly)
endif

all: build
	@:

ALLFILES := $(TARBALLS) $(PATCHES)

ifdef package
clean:

fetch: $(addprefix download/, $(ALLFILES))

checksum: $(addprefix $(CSUM)-, $(ALLFILES))

extract: $(addsuffix -extract,$(addprefix $(tmptree)/stamps/, $(ALLFILES)))

patch: $(addprefix patch-$(BUILDDIR)/, $(ALLFILES))
endif

download/%:
	@for url in $(addsuffix /$*, $(subst ://,//,$(LOCATION))); do \
		$(MAKE) $(fetch)=$$url download && break; \
	done

# ----- downloading targets --------------------------------------------------

ifdef download
PHONY += download
download: $(subst ://,//,$(download))

quiet_cmd_download_http = HTTP    $(subst //,://,$@)
      cmd_download_http = wget -P download $(subst //,://,$@) > /dev/null 2>&1

http//%:
	$(call cmd,download_http)
endif

# ----- checksumming targets -------------------------------------------------

quiet_cmd_check_md5 = MD5     $*
      cmd_check_md5 = grep $* checksums/md5 | md5sum -c > /dev/null

md5-%: download/%
	$(call cmd,check_md5)

quiet_cmd_check_sha1 = SHA1    $*
      cmd_check_sha1 = grep $* checksums/sha1 | sha1sum -c > /dev/null

sha1-%: download/%
	$(call cmd,check_sha1)

quiet_cmd_check_sha256 = SHA256  $*
      cmd_check_sha256 = grep $* checksums/sha256 | sha256sum -c > /dev/null

sha256-%: download/%
	$(call cmd,check_sha256)

##
## from here on, targets are platform-dependent
##

# ----- extract targets ------------------------------------------------------

tarball = $(srctree)/download/$(patsubst %-extract,%,$(@F))

%.tar.bz2-extract:
	$(call cmd,mkdir_p_arg,$(@D))
	$(call cmd,extract_tar_bz2,$(tarball))
	#mkdir -p $(tmptree)/stamps
	#touch $(tmptree)/stamps/extract-$(notdir $(tarball))

# ----- patch targets --------------------------------------------------------

patch-%:
	@echo "Patching $@ ...\n"

# ----- configure targets ----------------------------------------------------

quiet_pkg_configure_autotools = CONFIG  $*
      pkg_configure_autotools = cd $* && $(CONFIGURE_ENV) ./configure \
				$(CONFIGURE_ARGS)

quiet_pkg_configure_make = CONFIG  $*
      pkg_configure_make = cd $* && $(CONFIGURE_ENV) make $(CONFIGURE_ARGS)

configure-%/configure:
	$(call cmd,pkg_configure_autotools)

configure-%/Makefile:
	$(call cmd,pkg_configure_make)

# ----- build targets --------------------------------------------------------

quiet_pkg_build_make = BUILD   $*
      pkg_build_make = cd $* && $(BUILD_ENV) make $(BUILD_ARGS)

build-%/Makefile:
	$(call cmd,pkg_build_make)

# ----- install targets ------------------------------------------------------

quiet_pkg_install_make = INSTALL $*
      pkg_install_make = cd $* $(INSTALL_ENV) make $(INSTALL_ARGS)

install-%/Makefile:
	$(call cmd,pkg_install_make)

# ----- clean targets --------------------------------------------------------

.PHONY: $(PHONY)

# vim: ft=make

