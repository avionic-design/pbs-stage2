# unexport environment variables that may get in the way
unexport CC CFLAGS LD LDFLAGS

KBUILD_OUTPUT = $(buildtree)
export KBUILD_OUTPUT

ARCH := $(patsubst mips%,mips,$(ARCH))
ARCH := $(patsubst i%86,x86,$(ARCH))

  image-blackfin = vmImage
install-blackfin = install

  image-x86 = bzImage
install-x86 = install

ifneq ($(image-$(ARCH)),)
  image = $(image-$(ARCH))
else
  image = zImage
endif

ifneq ($(install-$(ARCH)),)
  install-target = $(install-$(ARCH))
else
  install-target = zinstall
endif

$(KBUILD_OUTPUT)/.config:
	cd $(KERNELSRC) && \
		$(MAKE) ARCH=$(ARCH) \
			KBUILD_OUTPUT=$(KBUILD_OUTPUT) \
			$(KERNEL_CONFIG)

PHONY += $(PLATFORM)/kernel-version
$(PLATFORM)/kernel-version:
	cd $(KERNELSRC) && \
		$(MAKE) ARCH=$(ARCH) \
			KBUILD_OUTPUT=$(KBUILD_OUTPUT) \
			kernelversion > $@

PHONY += $(PLATFORM)/kernel-release
$(PLATFORM)/kernel-release:
ifneq ($(CROSS_COMPILE),)
	cd $(KERNELSRC) && \
		$(MAKE) ARCH=$(ARCH) \
			KBUILD_OUTPUT=$(KBUILD_OUTPUT) \
			include/config/kernel.release
	cd $(KERNELSRC) && \
		$(MAKE) ARCH=$(ARCH) \
			KBUILD_OUTPUT=$(KBUILD_OUTPUT) \
			kernelrelease > $@
endif

PHONY += config
config: $(KBUILD_OUTPUT)/.config
config: $(PLATFORM)/kernel-version
config: $(PLATFORM)/kernel-release

PHONY += build-$(image)
build-$(image): config
	cd $(KERNELSRC) && \
		$(MAKE) ARCH=$(ARCH) \
			CROSS_COMPILE=$(CROSS_COMPILE) \
			KBUILD_OUTPUT=$(KBUILD_OUTPUT) \
			$(image)

PHONY += build-modules
build-modules: config
	cd $(KERNELSRC) && \
		$(MAKE) ARCH=$(ARCH) \
			CROSS_COMPILE=$(CROSS_COMPILE) \
			KBUILD_OUTPUT=$(KBUILD_OUTPUT) \
			modules

PHONY += build
build: build-$(image) build-modules

PHONY += headers-check
headers-check: config
	cd $(KERNELSRC) && \
		$(priv) $(MAKE) ARCH=$(ARCH) \
			CROSS_COMPILE=$(CROSS_COMPILE) \
			KBUILD_OUTPUT=$(KBUILD_OUTPUT) \
			headers_check

PHONY += headers-install
headers-install: config
	cd $(KERNELSRC) && \
		$(priv) $(MAKE) ARCH=$(ARCH) \
			CROSS_COMPILE=$(CROSS_COMPILE) \
			KBUILD_OUTPUT=$(KBUILD_OUTPUT) \
			INSTALL_HDR_PATH=$(ROOTFS)$(prefix) \
			headers_install
ifeq ($(ARCH),arm)
	# some programs need this to compile
	-$(priv) cp $(KERNELSRC)/include/asm-$(ARCH)/linkage.h $(ROOTFS)$(prefix)/include/asm
	-$(priv) cp $(KERNELSRC)/arch/$(ARCH)/include/asm/linkage.h $(ROOTFS)$(prefix)/include/asm
	$(priv) cp $(KERNELSRC)/include/linux/linkage.h $(ROOTFS)$(prefix)/include/linux
endif
ifeq ($(ARCH),blackfin)
	$(priv) cp $(KERNELSRC)/arch/$(ARCH)/include/asm/user.h $(ROOTFS)$(prefix)/include/asm
	$(priv) cp $(KERNELSRC)/include/linux/user.h $(ROOTFS)$(prefix)/include/linux
endif

PHONY += install-$(image)
install-$(image): build-$(image)
	cd $(KERNELSRC) && \
		$(priv) $(MAKE) ARCH=$(ARCH) \
			CROSS_COMPILE=$(CROSS_COMPILE) \
			KBUILD_OUTPUT=$(KBUILD_OUTPUT) \
			INSTALL_PATH=$(PLATFORM) \
			$(install-target)

PHONY += install-modules
install-modules: build-modules
	cd $(KERNELSRC) && \
		$(priv) $(MAKE) ARCH=$(ARCH) \
			CROSS_COMPILE=$(CROSS_COMPILE) \
			KBUILD_OUTPUT=$(KBUILD_OUTPUT) \
			INSTALL_MOD_PATH=$(ROOTFS) \
			modules_install

PHONY += install
install: install-$(image) install-modules

PHONY += clean
clean:
ifneq ($(wildcard $(KBUILD_OUTPUT)),)
	$(Q)cd $(KERNELSRC) && \
		$(MAKE) ARCH=$(ARCH) \
			KBUILD_OUTPUT=$(KBUILD_OUTPUT) \
			mrproper
else
	@:
endif

PHONY += version
version:
	cd $(KERNELSRC) && \
		$(MAKE) ARCH=$(ARCH) \
			KBUILD_OUTPUT=$(KBUILD_OUTPUT) \
			kernelversion

.PHONY: $(PHONY)

