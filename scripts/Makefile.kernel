# unexport environment variables that may get in the way
unexport CC CFLAGS LD LDFLAGS

KBUILD_OUTPUT = $(obj)
export KBUILD_OUTPUT

ARCH := $(shell echo $(ARCH))
ARCH := $(patsubst mips%,mips,$(ARCH))
ARCH := $(patsubst i%86,x86,$(ARCH))

  image-blackfin = vmImage
install-blackfin = install

  image-mips = vmlinux
install-mips = install

  image-x86 = bzImage
install-x86 = install

  image-x86_64 = bzImage
install-x86_64 = install

  image-arm = zImage
install-arm = zinstall

ifneq ($(image-$(ARCH)),)
  image = $(image-$(ARCH))
else
  image = zImage
endif

ifneq ($(install-$(ARCH)),)
  install-target = $(install-$(ARCH))
else
  install-target = zinstall
endif

ifeq ($(KERNEL_CONFIG),)
  $(error KERNEL_CONFIG is undefined, aborting ..)
endif

include $(srctree)/scripts/Kbuild.include

make-conf = \
	CROSS_COMPILE=$(CROSS_COMPILE) \
	KBUILD_OUTPUT=$(KBUILD_OUTPUT) \
	ARCH=$(ARCH)

quiet_cmd_gen_config = GEN     $@
      cmd_gen_config = \
			cd $(KERNELSRC) && $(MAKE) $(make-conf) \
				$(KERNEL_CONFIG)

$(KBUILD_OUTPUT)/.config:
	$(if $(wildcard $(@D)),,mkdir -p $(@D))
	$(call cmd,gen_config)

quiet_cmd_gen_kernel_version = GEN     $@
      cmd_gen_kernel_version = \
			cd $(KERNELSRC) && $(MAKE) $(make-conf) \
				kernelversion > $@

$(pkgtree)/kernel-version:
	$(call cmd,gen_kernel_version)

quiet_cmd_gen_kernel_release = GEN     $@
      cmd_gen_kernel_release = \
			cd $(KERNELSRC) && $(MAKE) $(make-conf) \
				include/config/kernel.release

$(KBUILD_OUTPUT)/include/config/kernel.release:
	$(call cmd,gen_kernel_release)

$(pkgtree)/kernel-release: $(KBUILD_OUTPUT)/include/config/kernel.release
	$(Q)echo "VERSION = `cat $<`" > $@
	$(Q)echo "  GEN     $@"

PHONY += config
config: $(KBUILD_OUTPUT)/.config
config: $(pkgtree)/kernel-version
config: $(pkgtree)/kernel-release

quiet_cmd_build_kernel_image = BUILD   $(image)
      cmd_build_kernel_image = \
			cd $(KERNELSRC) && $(env) $(MAKE) $(make-conf) \
					-j $(NUM_CPU) $(image)

PHONY += build-$(image)
build-$(image): $(objtree)/.config
	$(call cmd,build_kernel_image)

quiet_cmd_build_kernel_modules = BUILD   modules
      cmd_build_kernel_modules = \
			cd $(KERNELSRC) && $(MAKE) $(make-conf) \
					-j $(NUM_CPU) modules

PHONY += build-modules
build-modules: $(objtree)/.config
	$(call cmd,build_kernel_modules)

ifneq ($(KERNEL_DTB),)
quiet_cmd_build_fdt = BUILD   fdt
      cmd_build_fdt = cd $(KERNELSRC) && $(MAKE) $(make-conf) \
					-j $(NUM_CPU) dtbs

PHONY += build-fdt
build-fdt: $(objtree)/.config
	$(call cmd,build_fdt)

quiet_cmd_install_fdt = SYMLINK fdt
      cmd_install_fdt = ln -sf $(KBUILD_OUTPUT)/arch/$(ARCH)/boot/$(KERNEL_DTB).dtb $(objtree)/fdt.dtb

PHONY += install-fdt
install-fdt:
	$(call cmd,install_fdt)
else
PHONY += build-fdt
build-fdt:

PHONY += install-fdt
install-fdt:
endif


PHONY += build
build: build-$(image) build-modules build-fdt

PHONY += headers-check
headers-check: config
	cd $(KERNELSRC) && \
		$(env) $(MAKE) $(make-conf) \
			headers_check

PHONY += headers-install
headers-install: config
	cd $(KERNELSRC) && \
		$(priv) $(env) $(MAKE) $(make-conf) \
			INSTALL_HDR_PATH=$(DESTDIR)$(prefix) \
			headers_install
ifeq ($(ARCH),arm)
	# some programs need this to compile
	-$(priv) cp $(KERNELSRC)/include/asm-$(ARCH)/linkage.h $(DESTDIR)$(prefix)/include/asm
	-$(priv) cp $(KERNELSRC)/arch/$(ARCH)/include/asm/linkage.h $(DESTDIR)$(prefix)/include/asm
	$(priv) cp $(KERNELSRC)/include/linux/linkage.h $(DESTDIR)$(prefix)/include/linux
endif
ifeq ($(ARCH),blackfin)
	$(priv) cp $(KERNELSRC)/arch/$(ARCH)/include/asm/user.h $(DESTDIR)$(prefix)/include/asm
	$(priv) cp $(KERNELSRC)/include/linux/user.h $(DESTDIR)$(prefix)/include/linux
endif

PHONY += install-$(image)
install-$(image): build-$(image)
	if test -d $(DESTDIR)/boot ; then rm -r $(DESTDIR)/boot ; fi
	mkdir -p $(DESTDIR)/boot
	cd $(KERNELSRC) && \
		$(MAKE) $(make-conf) \
			INSTALL_PATH=$(DESTDIR)/boot \
			$(install-target)

ifneq ($(wildcard $(pkgtree)/kernel-release),)
  include $(pkgtree)/kernel-release
endif

PHONY += install-image-link
install-image-link: install-$(image)
ifeq ($(ARCH),x86)
	ln -sf $(DESTDIR)/boot/vmlinuz $(objtree)
else
  ifeq ($(install-target),zinstall)
	ln -sf $(DESTDIR)/boot/vmlinuz-$(VERSION) $(objtree)
  else
	ln -sf $(DESTDIR)/boot/vmlinux-$(VERSION) $(objtree)
  endif
endif
	@:

PHONY += install-modules
install-modules: build-modules
	cd $(KERNELSRC) && \
		$(priv) $(MAKE) $(make-conf) \
			INSTALL_MOD_PATH=$(DESTDIR) \
			modules_install

PHONY += install
install: install-$(image) install-image-link install-modules install-fdt

PHONY += clean
clean:
ifneq ($(wildcard $(KBUILD_OUTPUT)),)
	$(Q)cd $(KERNELSRC) && \
		$(MAKE) $(make-conf) \
			mrproper
else
	@:
endif

PHONY += version
version:
	cd $(KERNELSRC) && \
		$(MAKE) $(make-conf) \
			kernelversion

.PHONY: $(PHONY)
