src = $(obj)

PHONY := all
all: install

obj-y :=

-include include/config/auto.conf
include include/config/depends.mk
include scripts/Kbuild.include
include scripts/Makefile.lib

pkgtree		:= $(objtree)/build/$(obj)
pkgsrctree	:= $(srctree)/$(obj)
# Try version specific patches before the generic ones
patchdir	= $(or $(wildcard $(pkgsrctree)/patches-$(VERSION)),$(pkgsrctree)/patches)
export pkgtree pkgsrctree patchdir

# Declare a default value for $(pkgbuildtree), it can't be a simple variable
# because $(PACKAGE) and $(VERSION) are defined in the following include.
pkgbuildtree	= $(pkgtree)/$(PACKAGE)-$(VERSION)

# Allow overriding where zip files are extracted, in case they don't contains
# a sub directory.
unzip_pkgtree	= $(pkgtree)

kbuild-dir := $(if $(filter /%,$(src)),$(src),$(srctree)/$(src))
kbuild-file := $(if $(wildcard $(kbuild-dir)/Kbuild),$(kbuild-dir)/Kbuild,$(kbuild-dir)/Makefile)
include $(kbuild-file)

# Turn $(pkgbuildtree) and $(patchdir) into a simple variable
pkgbuildtree	:= $(pkgbuildtree)
patchdir	:= $(patchdir)

url-filename	= $(lastword $(subst /, ,$(subst ;filename=, ,$(1))))
url-pathname	= $(firstword $(subst ;filename=, ,$(1)))

location	:= $(LOCATION)
tarballs	:= $(foreach file,$(TARBALLS),$(call url-filename,$(file)))
files		:= $(foreach file,$(FILES),$(call url-filename,$(file)))

chksum-prefix	:= $(pkgtree)/.chksum-
chksum		:= $(addprefix $(chksum-prefix),$(tarballs) $(files))

extprefix	:= $(pkgtree)/.extract-
extract		:= $(addprefix $(extprefix),$(tarballs))
extract-deb	:= $(filter %.deb,$(extract))
extract-gz	:= $(filter %.tar.gz,$(extract)) $(filter %.tgz,$(extract))
extract-bz2	:= $(filter %.tar.bz2,$(extract))
extract-lzma	:= $(filter %.tar.lzma,$(extract))
extract-xz	:= $(filter %.tar.xz,$(extract))
extract-zip	:= $(filter %.zip,$(extract))
extract-bin	:= $(filter %.bin,$(extract))

local-files	:= $(addprefix $(srctree)/download/,$(tarballs) $(files))
remote-files	:= $(addprefix $(LOCATION)/,$(TARBALLS)) $(FILES)
local-src	:= $(objtree)/source/$(obj)

dlurl = $(call url-pathname,$(filter %$*,$(remote-files)))
destination = $(if $(filter %/$(@F),$(dlurl)),,(-> $(@F)))

quiet_cmd_wget = WGET    $(dlurl) $(destination)
      cmd_wget = $(srctree)/scripts/download "$(dlurl)" $@

$(srctree)/download:
	$(call cmd,mkdir_p)

$(local-files): $(srctree)/download/%: | $(srctree)/download
	$(call cmd,wget)

ifeq ($(GENERATE_CHECKSUMS),y)
quiet_cmd_checksum_sha256 = SHA256  $<
      cmd_checksum_sha256 = echo "check sha256 for download/$* in $(srctree) / $(obj)/checksums" && \
		cd $(srctree) && \
		(grep download/$* $(obj)/checksums | sha256sum -c --quiet || \
			(echo "generate sha256 for download/$*" && \
				(cat $(obj)/checksums ; sha256sum download/$*) | \
					sort -V -k 2 -o $(obj)/checksums))
else
quiet_cmd_checksum_sha256 = SHA256  $<
      cmd_checksum_sha256 = echo "check sha256 for download/$* in $(srctree) / $(obj)/checksums" && \
		cd $(srctree) && \
		grep download/$* $(obj)/checksums | sha256sum -c --quiet
endif

$(chksum): $(chksum-prefix)%: $(srctree)/download/%
	$(call cmd,checksum_sha256)
	$(call cmd,stamp)

$(pkgtree)/.checksum: $(pkgtree)/.directory $(chksum)
	$(call cmd,stamp)

quiet_cmd_deb = DEB     $<
      cmd_deb = dpkg-deb --extract $< $(pkgbuildtree)

quiet_cmd_tar_gz = TAR     $<
      cmd_tar_gz = cd $(pkgtree) && tar xzf $<

quiet_cmd_tar_bz2 = TAR     $<
      cmd_tar_bz2 = cd $(pkgtree) && tar xjf $<

quiet_cmd_tar_lzma = TAR     $<
      cmd_tar_lzma = cd $(pkgtree) && tar --lzma -xf $<

quiet_cmd_tar_xz = TAR     $<
      cmd_tar_xz = cd $(pkgtree) && tar xJf $<

quiet_cmd_unzip = UNZIP   $<
      cmd_unzip = mkdir -p $(unzip_pkgtree) && unzip -q -d $(unzip_pkgtree) $<

quiet_cmd_run_bin = RUN     $<
      cmd_run_bin = cd $(pkgtree) && \
			(test -x $(run_bin_PROG) || chmod +x $(run_bin_PROG)) && \
			$(run_bin_PROG) $(run_bin_ARGS)

# Per default just run the .bin
run_bin_PROG ?= $<

$(extract-gz): $(extprefix)%: $(srctree)/download/%
	$(call cmd,tar_gz)
	$(call cmd,stamp)

$(extract-deb): $(extprefix)%.deb: $(srctree)/download/%.deb
	$(call cmd,deb)
	$(call cmd,stamp)

$(extract-bz2): $(extprefix)%.tar.bz2: $(srctree)/download/%.tar.bz2
	$(call cmd,tar_bz2)
	$(call cmd,stamp)

$(extract-lzma): $(extprefix)%.tar.lzma: $(srctree)/download/%.tar.lzma
	$(call cmd,tar_lzma)
	$(call cmd,stamp)

$(extract-xz): $(extprefix)%.tar.xz: $(srctree)/download/%.tar.xz
	$(call cmd,tar_xz)
	$(call cmd,stamp)

$(extract-zip): $(extprefix)%.zip: $(srctree)/download/%.zip
	$(call cmd,unzip)
	$(call cmd,stamp)

$(extract-bin): $(extprefix)%.bin: $(srctree)/download/%.bin
	$(call cmd,run_bin)
	$(call cmd,stamp)

$(pkgtree)/.directory:
	$(Q)mkdir -p $(@D)
	$(call cmd,stamp)

$(pkgtree)/.extract: $(pkgtree)/.checksum $(extract)
	$(call cmd,stamp)

setup-deps := $(pkgtree)/.extract
dist-deps  := $(addprefix $(objtree)/dist/download/,$(tarballs))

quiet_cmd_checkout_svn = SVN     $(LOCATION_SVN)
      cmd_checkout_svn = rm -rf $(pkgbuildtree) && \
			cd $(dir $(pkgbuildtree)) && \
			svn export $(LOCATION_SVN) $(notdir $(pkgbuildtree)) > /dev/null

$(pkgtree)/.svn-export: $(pkgtree)/.directory
	$(call cmd,checkout_svn)
	$(call cmd,stamp)

ifneq ($(LOCATION_SVN),)
  setup-deps := $(pkgtree)/.svn-export
  dist-deps  := $(objtree)/dist/$(obj)/src.svn
endif

GIT_ARGS = \
	$(if $(GIT_REFERENCE_DIR),--reference $(GIT_REFERENCE_DIR),--depth 1) \
	-q -b $(or $(call unquote,$(GIT_CHECKOUT)),master)

quiet_cmd_checkout_git = GIT     $(GIT_URL)
      cmd_checkout_git = rm -rf $(pkgbuildtree) && \
			git clone $(GIT_ARGS) $(GIT_URL) $(pkgbuildtree)

$(pkgtree)/.git-clone: $(pkgtree)/.directory
	$(call cmd,checkout_git)
	$(call cmd,stamp)

ifneq ($(GIT_URL),)
  setup-deps := $(pkgtree)/.git-clone
  dist-deps  := $(objtree)/dist/$(obj)/src.git
endif

ifneq ($(wildcard $(local-src)),)
quiet_cmd_symlink_source = LN      $(local-src)
      cmd_symlink_source = rm -rf $(pkgbuildtree) && \
			ln -s $(local-src) $(pkgbuildtree)

$(pkgtree)/.symlink-source: $(pkgtree)/.directory
	$(call cmd,symlink_source)
	$(call cmd,stamp)

setup-deps := $(pkgtree)/.symlink-source
dist-deps  := $(objtree)/dist/$(obj)/src.local
endif

$(pkgtree)/.setup: $(setup-deps)

quiet_cmd_quilt_patch = PATCH   $(pkgsrctree)
      cmd_quilt_patch = cd $(pkgbuildtree) && \
				QUILT_PATCHES=$(patchdir) \
				quilt --quiltrc /dev/null push -a || \
				test $$? = 2

patch-series = $(if $(wildcard $(local-src)),,$(wildcard $(patchdir)/series))

$(pkgtree)/.patch: $(pkgtree)/.setup
	$(if $(patch-series),$(call cmd,quilt_patch))
	$(call cmd,stamp)

PHONY += install
install: $(pkgtree)/.install
	@:

quiet_cmd_tar_export = LN      $(patsubst $(srctree)/%,%,$<) $(patsubst $(objtree)/%,%,$@)
      cmd_tar_export = mkdir -p $(@D) && ln $< $@

quiet_cmd_git_export = GIT     $(GIT_URL) $(patsubst $(objtree)/%,%,$@)
      cmd_git_export = mkdir -p $@ && cd $(@D) && \
			git clone $(GIT_ARGS) $(GIT_URL) $(@F).clone && \
			cd $(@F).clone && \
			git archive --format=tar HEAD | tar -x -C $@ && \
			cd .. && \
			rm -rf $(@F).clone

quiet_cmd_svn_export = SVN     $(SVN_LOCATION) $(patsubst $(objtree)/%,%,$@)
      cmd_svn_export = mkdir -p $(@D) && cd $(@D) && \
			svn export $(LOCATION_SVN) $(@F) > /dev/null

SRC_EXPORT_EXCLUDE=*~ .svn .git
quiet_cmd_src_export = CP      $(patsubst $(srctree)/%,%,$(local-src)) $(patsubst $(objtree)/%,%,$@)
      cmd_src_export = mkdir -p $@ && \
				tar -c -C $(local-src) $(addprefix --exclude=,$(SRC_EXPORT_EXCLUDE)) . | \
					tar -x -C $@

source-link := build/source/$(obj)
rel-dist-dir := $(subst $(space),/,$(patsubst %,..,$(subst /,$(space),$(dir $(source-link)))))
rel-source = $(rel-dist-dir)/$(patsubst $(objtree)/dist/%,%,$@)

quiet_cmd_ln_src = LN      $(patsubst $(objtree)/%,%,$@)
      cmd_ln_src = cd $(objtree)/dist && \
			mkdir -p $(dir $(source-link)) && \
			ln -s $(rel-source) $(source-link)

$(objtree)/dist/download/%: $(srctree)/download/%
	$(call cmd,tar_export)

$(objtree)/dist/$(obj)/src.git:
	$(call cmd,git_export)
	$(call cmd,ln_src)

$(objtree)/dist/$(obj)/src.svn:
	$(call cmd,svn_export)
	$(call cmd,ln_src)

$(objtree)/dist/$(obj)/src.local:
	$(call cmd,src_export)
	$(call cmd,ln_src)

quiet_cmd_clean_pkgtree = RM      $(pkgtree)
      cmd_clean_pkgtree = rm -rf $(pkgtree)

PHONY += clean
clean:
	$(call cmd,clean_pkgtree)

PHONY += dist
dist: $(dist-deps) $(extra-dist-deps)
	@:

PKGSTR=$(PACKAGE): $(VERSION)$(if $(wildcard $(pkgtree)/.symlink-source),+)

PHONY += print
print:
	@echo "$(PKGSTR)"

PHONY += license
license:
	@echo "$(PACKAGE): $(LICENSE)"

cmd_time_pkgtree = \
	$$(printf "%-31s " '$(PKGSTR)' && \
		[ -f $(pkgtree)/.directory ] && \
		([ -f $(pkgtree)/.install ] && \
			(printf "%'10d s" $$(($$(stat -c %X $(pkgtree)/.install) - \
				$$(stat -c %X $(pkgtree)/.directory)))) || \
			printf '%12s' '(unfinished)') || \
		printf '%12s' '(not built)' \
	)

PHONY += time
time:
	@echo "$(call cmd_time_pkgtree)"

PHONY += FORCE
FORCE: ;

.PHONY: $(PHONY)
