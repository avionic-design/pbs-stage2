src = $(obj)

PHONY := all
all: install

obj-y :=

-include include/config/auto.conf
include scripts/Kbuild.include
include scripts/Makefile.lib

pkgtree		:= $(objtree)/build/$(obj)
pkgsrctree	:= $(srctree)/$(obj)
patchdir	:= $(pkgsrctree)/patches
export pkgtree pkgsrctree patchdir

kbuild-dir := $(if $(filter /%,$(src)),$(src),$(srctree)/$(src))
kbuild-file := $(if $(wildcard $(kbuild-dir)/Kbuild),$(kbuild-dir)/Kbuild,$(kbuild-dir)/Makefile)
include $(kbuild-file)

ifeq ($(pkgbuildtree),)
  pkgbuildtree := $(pkgtree)/$(PACKAGE)-$(VERSION)
endif

url-filename	= $(lastword $(subst /, ,$(subst ;filename=, ,$(1))))
url-pathname	= $(firstword $(subst ;filename=, ,$(1)))

location	:= $(LOCATION)
tarballs	:= $(foreach file,$(TARBALLS),$(call url-filename,$(file)))
files		:= $(foreach file,$(FILES),$(call url-filename,$(file)))

chksum-prefix	:= $(pkgtree)/.chksum-
chksum		:= $(addprefix $(chksum-prefix),$(tarballs) $(files))

extprefix	:= $(pkgtree)/.extract-
extract		:= $(addprefix $(extprefix),$(tarballs))
extract-gz	:= $(filter %.tar.gz,$(extract)) $(filter %.tgz,$(extract))
extract-bz2	:= $(filter %.tar.bz2,$(extract))
extract-lzma	:= $(filter %.tar.lzma,$(extract))
extract-xz      := $(filter %.tar.xz,$(extract))
extract-bin     := $(filter %.bin,$(extract))

local-files	:= $(addprefix $(srctree)/download/,$(tarballs) $(files))
remote-files	:= $(addprefix $(LOCATION)/,$(TARBALLS)) $(FILES)

quiet_cmd_stamp = STAMP   $@
      cmd_stamp = mkdir -p $(@D); touch $@

dlurl = $(call url-pathname,$(filter %$*,$(remote-files)))
destination = $(if $(filter %/$(@F),$(dlurl)),,(-> $(@F)))

quiet_cmd_wget = WGET    $(dlurl) $(destination)
      cmd_wget = wget -q $(dlurl) -O $@ || ( rm $@ ; false )

$(local-files): $(srctree)/download/%:
	$(call cmd,wget)

quiet_cmd_checksum_sha256 = SHA256  $<
      cmd_checksum_sha256 = cd $(srctree) && \
		grep $* checksums/sha256 | sha256sum -c --quiet

$(chksum): $(chksum-prefix)%: $(srctree)/download/%
	$(call cmd,checksum_sha256)
	$(call cmd,stamp)

$(pkgtree)/.checksum: $(pkgtree)/.directory $(chksum)
	$(call cmd,stamp)

quiet_cmd_tar_gz = TAR     $<
      cmd_tar_gz = cd $(pkgtree) && tar xzf $<

quiet_cmd_tar_bz2 = TAR     $<
      cmd_tar_bz2 = cd $(pkgtree) && tar xjf $<

quiet_cmd_tar_lzma = TAR     $<
      cmd_tar_lzma = cd $(pkgtree) && tar --lzma -xf $<

quiet_cmd_tar_xz = TAR     $<
      cmd_tar_xz = cd $(pkgtree) && tar xJf $<

quiet_cmd_run_bin = RUN     $<
      cmd_run_bin = cd $(pkgtree) && \
			(test -x $(run_bin_PROG) || chmod +x $(run_bin_PROG)) && \
			$(run_bin_PROG) $(run_bin_ARGS)

# Per default just run the .bin
run_bin_PROG ?= $<

$(extract-gz): $(extprefix)%: $(srctree)/download/%
	$(call cmd,tar_gz)
	$(call cmd,stamp)

$(extract-bz2): $(extprefix)%.tar.bz2: $(srctree)/download/%.tar.bz2
	$(call cmd,tar_bz2)
	$(call cmd,stamp)

$(extract-lzma): $(extprefix)%.tar.lzma: $(srctree)/download/%.tar.lzma
	$(call cmd,tar_lzma)
	$(call cmd,stamp)

$(extract-xz): $(extprefix)%.tar.xz: $(srctree)/download/%.tar.xz
	$(call cmd,tar_xz)
	$(call cmd,stamp)

$(extract-bin): $(extprefix)%.bin: $(srctree)/download/%.bin
	$(call cmd,run_bin)
	$(call cmd,stamp)

$(pkgtree)/.directory:
	$(Q)mkdir -p $(@D)
	$(call cmd,stamp)

$(pkgtree)/.extract: $(pkgtree)/.checksum $(extract)
	$(call cmd,stamp)

setup-deps := $(pkgtree)/.extract

quiet_cmd_svn_export = SVN     $(LOCATION_SVN)
      cmd_svn_export = rm -rf $(pkgbuildtree) && \
			cd $(dir $(pkgbuildtree)) && \
			svn export $(LOCATION_SVN) $(notdir $(pkgbuildtree)) > /dev/null

$(pkgtree)/.svn-export: $(pkgtree)/.directory
	$(call cmd,svn_export)
	$(call cmd,stamp)

ifneq ($(LOCATION_SVN),)
  setup-deps := $(pkgtree)/.svn-export
endif

quiet_cmd_git_clone = GIT     $(GIT_URL)
      cmd_git_clone = rm -rf $(pkgbuildtree) && \
			cd $(dir $(pkgbuildtree)) && \
			git clone -q $(GIT_URL) $(notdir $(pkgbuildtree))

$(pkgtree)/.git-clone: $(pkgtree)/.directory
	$(call cmd,git_clone)
	$(call cmd,stamp)

quiet_cmd_git_checkout = GIT     $(GIT_CHECKOUT)
      cmd_git_checkout = cd $(pkgbuildtree) && git checkout -q $(GIT_CHECKOUT)

$(pkgtree)/.git-checkout: $(pkgtree)/.git-clone
	$(call cmd,git_checkout)
	$(call cmd,stamp)

ifneq ($(GIT_URL),)
  setup-deps := $(pkgtree)/.git-clone
  ifneq ($(GIT_CHECKOUT),)
    setup-deps += $(pkgtree)/.git-checkout
  endif
endif

quiet_cmd_ln_src = LN      $(pkgsrctree)/src
      cmd_ln_src = rm -rf $(pkgbuildtree) && \
			ln -s $(pkgsrctree)/src $(pkgbuildtree)

$(pkgtree)/.ln-src: $(pkgtree)/.directory
	$(call cmd,ln_src)
	$(call cmd,stamp)

ifneq ($(wildcard $(pkgsrctree)/src),)
  setup-deps := $(pkgtree)/.ln-src
endif

$(pkgtree)/.setup: $(setup-deps)

quiet_cmd_quilt_patch = PATCH   $(pkgsrctree)
      cmd_quilt_patch = cd $(pkgbuildtree) && \
				QUILT_PATCHES=$(patchdir) \
				quilt --quiltrc /dev/null push -a || \
				test $$? = 2

$(pkgtree)/.patch: $(pkgtree)/.setup
	$(if $(wildcard $(patchdir)/series),$(call cmd,quilt_patch))
	$(call cmd,stamp)

PHONY += install
install: $(pkgtree)/.install
	@:

PHONY += print
print:
	@echo "$(PACKAGE): $(VERSION)"

PHONY += FORCE
FORCE: ;

.PHONY: $(PHONY)
