--- a/libstdc++-v3/config/locale/generic/c_locale.h	2007-03-02 12:28:43.000000000 +0100
+++ b/libstdc++-v3/config/locale/generic/c_locale.h	2007-03-02 12:29:36.000000000 +0100
@@ -41,12 +41,18 @@
 #include <clocale>
 #include <cstring>   // get std::strlen
 #include <cstdio>    // get std::snprintf or std::sprintf
+#include <features.h>
+#include <ctype.h>
 
 #define _GLIBCXX_NUM_CATEGORIES 0
 
 namespace std
 {
-  typedef int*			__c_locale;
+#ifdef __UCLIBC__
+  typedef __ctype_touplow_t *__c_locale;
+#else
+  typedef int *__c_locale;
+#endif
 
   // Convert numeric value of type _Tv to string and return length of
   // string.  If snprintf is available use it, otherwise fall back to
--- a/libstdc++-v3/config/os/gnu-linux/ctype_base.h	2007-03-02 12:26:24.000000000 +0100
+++ b/libstdc++-v3/config/os/gnu-linux/ctype_base.h	2007-03-02 12:28:13.000000000 +0100
@@ -31,7 +31,10 @@
 //
 // ISO C++ 14882: 22.1  Locales
 //
-  
+
+#include <features.h>
+#include <ctype.h>
+
 /** @file ctype_base.h
  *  This is an internal header file, included by other library headers.
  *  You should not attempt to use it directly.
@@ -43,7 +46,11 @@
   struct ctype_base
   {
     // Non-standard typedefs.
-    typedef const int* 		__to_type;
+#ifdef __UCLIBC__
+    typedef const __ctype_touplow_t *__to_type;
+#else
+    typedef const int *__to_type;
+#endif
 
     // NB: Offsets into ctype<char>::_M_table force a particular size
     // on the mask type. Because of this, we don't use an enum.
