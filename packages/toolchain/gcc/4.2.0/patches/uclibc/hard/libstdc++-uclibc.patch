Index: b/libstdc++-v3/config/locale/generic/c_locale.h
===================================================================
--- a/libstdc++-v3/config/locale/generic/c_locale.h	2007-06-10 00:05:39.000000000 +0200
+++ b/libstdc++-v3/config/locale/generic/c_locale.h	2007-06-10 00:07:39.000000000 +0200
@@ -48,12 +48,18 @@
 #include <cstring>   // get std::strlen
 #include <cstdio>    // get std::vsnprintf or std::vsprintf
 #include <cstdarg>
+#include <features.h>
+#include <ctype.h>
 
 #define _GLIBCXX_NUM_CATEGORIES 0
 
 _GLIBCXX_BEGIN_NAMESPACE(std)
 
+#ifdef __UCLIBC__
+  typedef __ctype_touplow_t *	__c_locale;
+#else
   typedef int*			__c_locale;
+#endif
 
   // Convert numeric value of type double and long double to string and
   // return length of string.  If vsnprintf is available use it, otherwise
Index: b/libstdc++-v3/config/os/gnu-linux/ctype_base.h
===================================================================
--- a/libstdc++-v3/config/os/gnu-linux/ctype_base.h	2007-06-10 00:05:39.000000000 +0200
+++ b/libstdc++-v3/config/os/gnu-linux/ctype_base.h	2007-06-10 00:07:39.000000000 +0200
@@ -45,7 +45,11 @@
   struct ctype_base
   {
     // Non-standard typedefs.
+#ifdef __UCLIBC__
+    typedef const __ctype_touplow_t *__to_type;
+#else
     typedef const int* 		__to_type;
+#endif
 
     // NB: Offsets into ctype<char>::_M_table force a particular size
     // on the mask type. Because of this, we don't use an enum.
