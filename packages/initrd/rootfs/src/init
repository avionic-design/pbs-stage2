#!/bin/sh

PATH=/sbin:/bin:/usr/bin:/usr/sbin
export PATH

. /scripts/functions

echo "Loading, please wait ..."

# create needed directories
[ -d /dev  ] || mkdir -m 0755 /dev
[ -d /root ] || mkdir -m 0700 /root
[ -d /sys  ] || mkdir         /sys
[ -d /proc ] || mkdir         /proc
[ -d /tmp  ] || mkdir         /tmp

mkdir -p /var/lock

# mount virtual filesystems
log_begin_msg "Mounting virtual filesystems"
mount -o nodev,noexec,nosuid -t sysfs none /sys
mount -o nodev,noexec,nosuid -t proc  none /proc
log_end_msg

# mount /dev filesystem
log_begin_msg "Mounting /dev"
mount -o rw,mode=0755,size=256K -t tmpfs udev /dev
log_end_msg

# create needed devices
log_begin_msg "Creating devices"
[ -e /dev/console ] || mknod /dev/console c 5 1
[ -e /dev/null    ] || mknod /dev/null    c 1 3
[ -e /dev/loop0   ] || mknod /dev/loop0   b 7 0
log_end_msg

cmdline=`cat /proc/cmdline`
init=/sbin/init
root=/dev/mmcblk0p5:/rootfs.img
disk_mp=/media/sd-card
root_mp=/root
ro=n

# parsing kernel command line
for arg in $cmdline; do
	case $arg in
		root=*)
			root=`echo $arg | cut -d = -f 2`
			;;

		init=*)
			init=`echo $arg | cut -d = -f 2`
			;;

		remount-ro)
			ro=remount
			;;

		ro)
			ro=y
			;;

		*)
			;;
	esac
done

root_dev=`echo $root | cut -d : -f 1`
root_img=`echo $root | cut -d : -f 2`

if [ "x$root_dev" = "x$root_img" ]; then
	root_img=
fi

log_begin_msg "Running top scripts"
run_scripts /scripts/init-top
log_end_msg

log_begin_msg "Running premount scripts"
run_scripts /scripts/init-premount
log_end_msg

# mount target root filesystem
log_begin_msg "Mounting root filesystem: $root_mp"
mkdir -p "$disk_mp"

# mount the rootfs writeable for now
if [ "x$root_img" = "x" ]; then
	if [ "x$ro" = "xy" ]; then
		mount -o ro "$root_dev" "$disk_mp"
	else
		mount "$root_dev" "$disk_mp"
	fi

	root_mp="$disk_mp"
else
	if [ "x$ro" = "xy" ]; then
		mount -o ro      "$root_dev" "$disk_mp"
		mount -o ro,loop "${disk_mp}/${root_img}" "$root_mp"
	else
		mount         "$root_dev" "$disk_mp"
		mount -o loop "${disk_mp}${root_img}" "$root_mp"
	fi
fi

log_end_msg

# mount /dev filesystem
log_begin_msg "Mounting /dev"
mount -o rw,mode=0755,size=256K -t tmpfs udev "$root_mp/dev"
log_end_msg

# create devices in the new root filesystem
log_begin_msg "Creating devices"
[ -e "$root_mp/dev/console" ] || mknod "$root_mp/dev/console" c 5 1
log_end_msg

# kill the running udevd; the final udevd will be started in the new root
killall udevd

if [ "x$root_img" != "x" ]; then
	# move SD-Card partition to the real filesystem
	mkdir -p "${root_mp}${disk_mp}"
	mount -o move "$disk_mp" "${root_mp}${disk_mp}"
fi

# check for init in target filesystem
while [ ! -x "${root_mp}${init}" ]; do
	panic "Target filesystem doesn't have $init"
done

# unmounting temporary filesystems
log_begin_msg "Cleaning up initial ramdisk"
umount /dev
log_end_msg

if [ -d "$root_mp/debootstrap" ]; then
	log_begin_msg "Running second-stage of debootstrap"
	chroot "$root_mp" /debootstrap/debootstrap --second-stage
	mv "$root_mp/sbin/start-stop-daemon.REAL" \
		"$root_mp/sbin/start-stop-daemon"
	log_end_msg
fi

# remount the rootfs read-only
if [ "x$ro" = "xremount" ]; then
	log_begin_msg "Remounting root filesystem read-only"

	if [ "x$root_img" = "x" ]; then
		mount -o remount,ro "$disk_mp"
	else
		mount -o remount,ro "$root_mp"
	fi

	log_end_msg
fi

# move virtual filesystems over to the real filesystem
mount -o move /sys  "$root_mp/sys"
mount -o move /proc "$root_mp/proc"

exec switch_root "$root_mp" "$init" "$@"

