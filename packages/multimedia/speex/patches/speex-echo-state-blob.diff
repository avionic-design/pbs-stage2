diff --git a/include/speex/speex_echo.h b/include/speex/speex_echo.h
index c01688b..dc4ad6f 100644
--- a/include/speex/speex_echo.h
+++ b/include/speex/speex_echo.h
@@ -59,6 +59,12 @@ extern "C" {
 /** Get impulse response (int32[]) */
 #define SPEEX_ECHO_GET_IMPULSE_RESPONSE 29
 
+/** Get the internal echo canceller state for later use. Expected argument is a SpeexEchoStateBlob*/
+#define SPEEX_ECHO_GET_BLOB 30
+
+/** Assign a an internal state. Expected argument is a SpeexEchoStateBlob*/
+#define SPEEX_ECHO_SET_BLOB 31
+
 /** Internal echo canceller state. Should never be accessed directly. */
 struct SpeexEchoState_;
 
@@ -161,6 +167,45 @@ void speex_decorrelate(SpeexDecorrState *st, const spx_int16_t *in, spx_int16_t
 void speex_decorrelate_destroy(SpeexDecorrState *st);
 
 
+
+/**
+ * Structure to represent the internal state of the echo canceller. This is used to save and restore 
+ * the converged state of the echo canceller beyond process life or accross machine reboots.
+ * The goal behind is for a device that is always in the same acoustic conditions to always start the echo canceller
+ * in a converged state.
+ * To use this feature, proceeed as this:
+ * - use speex_echo_ctl() with SPEEX_ECHO_GET_BLOB to obtain a SpeexEchoStateBlob, at the end of an audio session, when the echo canceller is supposed to be converged.
+ * - save the blob to a disk file for example, using speex_echo_state_blob_get_data() and speex_echo_state_blob_get_size() to retrieve the actual data
+ *
+ * To restore the state later, after a reboot or a process restart, do the following:
+ * - read the data from the file where you previously save the blob's contents
+ * - instanciate a blob object from this data using speex_echo_state_blob_new_from_memory()
+ * - assign the blob to the echo canceller using speex_echo_ctl() with SPEEX_ECHO_SET_BLOB, before the echo canceller starts processing data.
+*/
+typedef struct SpeexEchoStateBlob_ SpeexEchoStateBlob;
+
+/** Create a SpeexEchoStateBlob from memory.
+ * @param data pointer to memory
+ * @param datalen length of the memory segment.
+*/
+SpeexEchoStateBlob * speex_echo_state_blob_new_from_memory(const unsigned char *data, int datalen);
+
+/**
+ * Get a pointer to the memory segment representing the echo canceller internal state.
+ * Use this with speex_echo_state_blob_get_size() to store this memory segment to a file for later use.
+*/
+const unsigned char * speex_echo_state_blob_get_data(SpeexEchoStateBlob *blob);
+
+/**
+ * Get the size of the memory segment representing the echo canceller internal state.
+*/
+int speex_echo_state_blob_get_size(SpeexEchoStateBlob *blob);
+
+/**
+ * Frees the blob.
+*/
+void speex_echo_state_blob_free(SpeexEchoStateBlob *blob);
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/libspeex/mdf.c b/libspeex/mdf.c
index 8a5c031..ed97e9e 100644
--- a/libspeex/mdf.c
+++ b/libspeex/mdf.c
@@ -125,6 +125,9 @@ static const spx_float_t VAR_BACKTRACK = 4.f;
 
 #define PLAYBACK_DELAY 2
 
+static SpeexEchoStateBlob * speex_echo_state_save_context(SpeexEchoState *st);
+static int speex_echo_state_restore_context(SpeexEchoState *st, SpeexEchoStateBlob *blob);
+
 void speex_echo_get_residual(SpeexEchoState *st, spx_word32_t *Yout, int len);
 
 
@@ -1277,9 +1280,93 @@ EXPORT int speex_echo_ctl(SpeexEchoState *st, int request, void *ptr)
          }
       }
          break;
+      case SPEEX_ECHO_GET_BLOB:
+	 *((SpeexEchoStateBlob**)ptr)=speex_echo_state_save_context(st);
+         break;
+      case SPEEX_ECHO_SET_BLOB:
+      {
+         int ret=speex_echo_state_restore_context(st,(SpeexEchoStateBlob*)ptr);
+        
+         return ret; 
+      }
+	break;
       default:
          speex_warning_int("Unknown speex_echo_ctl request: ", request);
          return -1;
    }
    return 0;
 }
+
+struct SpeexEchoStateBlob_{
+	int blob_size;
+	int C,K,M,N;
+	spx_word16_t foreground[1];		
+};
+
+EXPORT const unsigned char *speex_echo_state_blob_get_data(SpeexEchoStateBlob *blob){
+	return (unsigned char*)blob;
+}
+
+EXPORT int speex_echo_state_blob_get_size(SpeexEchoStateBlob *blob){
+	return blob->blob_size;
+}
+
+EXPORT void speex_echo_state_blob_free(SpeexEchoStateBlob *blob){
+	speex_free(blob);
+}
+
+EXPORT SpeexEchoStateBlob *speex_echo_state_blob_new_from_memory(const unsigned char *buffer, int len){
+	SpeexEchoStateBlob *blob=(SpeexEchoStateBlob*)buffer;
+	
+	/*make some sanity checks */
+	if (blob->blob_size!=len){
+		speex_warning_int("Bad blob size of ",blob->blob_size);
+		return NULL;
+	}
+	if (blob->blob_size!=(sizeof(int)*5 + (blob->C*blob->K*blob->M*blob->N*sizeof(spx_word16_t)))){
+		speex_warning("Blob is corrupted !");
+		return NULL;
+	}
+	blob=(SpeexEchoStateBlob*)speex_alloc(len);
+	memcpy(blob,buffer,len);
+	return blob;
+}
+
+static SpeexEchoStateBlob *speex_echo_state_blob_new(int C, int K, int M, int N, spx_word16_t *foreground){
+	int wlen=C*K*M*N*sizeof(spx_word16_t);
+	int len= wlen + sizeof(int)*5; 
+	SpeexEchoStateBlob *blob=(SpeexEchoStateBlob*)speex_alloc(len);
+	blob->blob_size=len;
+	blob->C=C;
+	blob->K=K;
+	blob->M=M;
+	blob->N=N;
+	memcpy(blob->foreground,foreground,wlen);
+	return blob;
+}
+
+EXPORT SpeexEchoStateBlob * speex_echo_state_save_context(SpeexEchoState *st){
+	return speex_echo_state_blob_new(st->C, st->K, st->M, st->window_size, st->foreground);
+}
+
+EXPORT int speex_echo_state_restore_context(SpeexEchoState *st, SpeexEchoStateBlob *blob){
+	int size=st->window_size*st->M*st->C*st->K;
+	int wlen=size*sizeof(spx_word16_t);
+	int i;
+
+	if (st->C!=blob->C || st->K!=blob->K 
+		|| st->M!=blob->M || st->window_size!=blob->N){
+		speex_warning("The blob is not compatible with the SpeexEchoState that has been initialized, sorry.");
+		return -1;
+	}
+	memcpy(st->foreground,blob->foreground,wlen);
+	for (i=0;i<size;i++)
+		st->W[i] = SHL32(EXTEND32(st->foreground[i]),16);
+	st->adapted=1;
+	return 0;
+}
+
+
+
+
+
