From eeb79910e21555f65d577b0f2ee23c34940358b4 Mon Sep 17 00:00:00 2001
From: Alban Bedel <alban.bedel@avionic-design.de>
Date: Tue, 10 Jul 2012 12:04:27 +0200
Subject: Add sscanf_c() and snprintf_c() to scan/print with C locale

The standard scanf/printf use, among other things, the decimal mark
from the locale. However there is several situations where this is not
desirable, in particular when reading/writing config files.
---
 configure.ac      |   15 ++++++++++
 coreapi/misc.c    |   81 +++++++++++++++++++++++++++++++++++++++++++++++++++++
 coreapi/private.h |    3 ++
 3 files changed, 99 insertions(+), 0 deletions(-)

diff --git a/configure.ac b/configure.ac
index 22bc235..18dec02 100644
--- a/configure.ac
+++ b/configure.ac
@@ -303,6 +303,21 @@ AC_DEFINE_UNQUOTED(PACKAGE_SOUND_DIR, "${package_prefix}/${DATADIRNAME}/sounds/l
 dnl check if we have the getifaddrs() sytem call
 AC_CHECK_FUNCS(getifaddrs)
 
+dnl check if locale.h exists
+AC_CHECK_HEADERS(locale.h)
+
+dnl check if vsscanf_l() exists
+AC_CHECK_FUNCS(vsscanf_l)
+
+dnl check if vsnprintf_l() exists
+AC_CHECK_FUNCS(vsnprintf_l)
+
+dnl check if uselocale() exists
+AC_CHECK_FUNCS(uselocale)
+
+dnl check if newlocale() exists
+AC_CHECK_FUNCS(newlocale)
+
 dnl check for osip2
 LP_CHECK_OSIP2
 
diff --git a/coreapi/misc.c b/coreapi/misc.c
index 607ee6b..6f242df 100644
--- a/coreapi/misc.c
+++ b/coreapi/misc.c
@@ -43,6 +43,11 @@ Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 #include <ifaddrs.h>
 #endif
 
+#ifdef HAVE_LOCALE_H
+#include <locale.h>
+#else
+typedef void* locale_t;
+#endif
 
 #if !defined(WIN32)
 
@@ -99,6 +104,82 @@ int remove_lock_file()
 
 #endif
 
+#ifdef HAVE_USELOCALE
+#define SET_LOCALE(l) uselocale(l)
+#define RESTORE_LOCALE() uselocale(LC_GLOBAL_LOCALE)
+#else // Fallback on hoping that the locale won't do bad things
+#define SET_LOCALE(l)
+#define RESTORE_LOCALE()
+#endif
+
+#ifndef HAVE_VSSCANF_L
+int vsscanf_l(const char * str, locale_t loc, const char * format, va_list ap)
+{
+	int r;
+
+	if (loc)
+		SET_LOCALE(loc);
+	r = vsscanf(str, format, ap);
+	if (loc)
+		RESTORE_LOCALE();
+
+	return r;
+}
+#endif /* HAVE_VSSCANF_L */
+
+#ifndef HAVE_VSNPRINTF_L
+int vsnprintf_l(char * str, size_t size, locale_t loc,
+                const char * format, va_list ap)
+{
+	int r;
+
+	if (loc)
+		SET_LOCALE(loc);
+	r = vsnprintf(str, size, format, ap);
+	if (loc)
+		RESTORE_LOCALE();
+
+	return r;
+}
+#endif /* HAVE_VSPRINTF_L */
+
+
+static locale_t get_c_locale(void)
+{
+#ifdef HAVE_NEWLOCALE
+	static locale_t c_locale = NULL;
+	if (!c_locale)
+		c_locale = newlocale(LC_ALL, "C", NULL);
+	return c_locale;
+#else
+	return NULL;
+#endif
+}
+
+int sscanf_c(const char * str, const char * format, ...)
+{
+	va_list ap;
+	int r;
+
+	va_start(ap, format);
+	r = vsscanf_l(str, get_c_locale(), format, ap);
+	va_end(ap);
+
+	return r;
+}
+
+int snprintf_c(char * str, size_t size, const char * format, ...)
+{
+	va_list ap;
+	int r;
+
+	va_start(ap, format);
+	r = vsnprintf_l(str, size, get_c_locale(), format, ap);
+	va_end(ap);
+
+	return r;
+}
+
 char *int2str(int number)
 {
 	char *numstr=ms_malloc(10);
diff --git a/coreapi/private.h b/coreapi/private.h
index 36dabbf..c1d25c1 100644
--- a/coreapi/private.h
+++ b/coreapi/private.h
@@ -548,6 +548,9 @@ void __linphone_core_invalidate_registers(LinphoneCore* lc);
 void call_logs_write_to_config_file(LinphoneCore *lc);
 
 
+/* sscanf() and snprintf() with C locale (ie. the decimal mark is always '.' and so on) */
+int sscanf_c(const char * str, const char * format, ...);
+int snprintf_c(char * str, size_t size, const char * format, ...);
 
 #ifdef __cplusplus
 }
-- 
1.7.2.3

From e25cecf5468707a63904aa395511056169053b37 Mon Sep 17 00:00:00 2001
From: Alban Bedel <alban.bedel@avionic-design.de>
Date: Tue, 10 Jul 2012 12:15:06 +0200
Subject: Use the locale independent scanf/printf to read/write configs

This allow us to always have the same config file syntax even with
locale using a comma as decimal mark.
---
 coreapi/linphonecall.c |    2 +-
 coreapi/lpconfig.c     |    5 +++--
 2 files changed, 4 insertions(+), 3 deletions(-)

diff --git a/coreapi/linphonecall.c b/coreapi/linphonecall.c
index dfbe13c..cacd572 100644
--- a/coreapi/linphonecall.c
+++ b/coreapi/linphonecall.c
@@ -904,7 +904,7 @@ static void parametrize_equalizer(LinphoneCore *lc, AudioStream *st){
 				do{
 					int bytes;
 					MSEqualizerGain g;
-					if (sscanf(gains,"%f:%f:%f %n",&g.frequency,&g.gain,&g.width,&bytes)==3){
+					if (sscanf_c(gains,"%f:%f:%f %n",&g.frequency,&g.gain,&g.width,&bytes)==3){
 						ms_message("Read equalizer gains: %f(~%f) --> %f",g.frequency,g.width,g.gain);
 						ms_filter_call_method(f,MS_EQUALIZER_SET_GAIN,&g);
 						gains+=bytes;
diff --git a/coreapi/lpconfig.c b/coreapi/lpconfig.c
index d12166e..da2436d 100644
--- a/coreapi/lpconfig.c
+++ b/coreapi/lpconfig.c
@@ -25,6 +25,7 @@
 #define MAX_LEN 16384
 
 #include "linphonecore.h"
+#include "private.h"
 
 #include <stdio.h>
 #include <stdlib.h>
@@ -281,7 +282,7 @@ float lp_config_get_float(LpConfig *lpconfig,const char *section, const char *ke
 	const char *str=lp_config_get_string(lpconfig,section,key,NULL);
 	float ret=default_value;
 	if (str==NULL) return default_value;
-	sscanf(str,"%f",&ret);
+	sscanf_c(str,"%f",&ret);
 	return ret;
 }
 
@@ -314,7 +315,7 @@ void lp_config_set_int(LpConfig *lpconfig,const char *section, const char *key,
 
 void lp_config_set_float(LpConfig *lpconfig,const char *section, const char *key, float value){
 	char tmp[30];
-	snprintf(tmp,sizeof(tmp),"%f",value);
+	snprintf_c(tmp,sizeof(tmp),"%f",value);
 	lp_config_set_string(lpconfig,section,key,tmp);
 }
 
-- 
1.7.2.3

