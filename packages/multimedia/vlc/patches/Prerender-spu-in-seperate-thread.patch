From 04ff8cacd3fcd769fc03136a6c18d3901b80866d Mon Sep 17 00:00:00 2001
From: Dirk Leber <dirk.leber@avionic-design.de>
Date: Fri, 13 Mar 2015 13:36:59 +0100
Subject: [PATCH] subpictures: Prerender spu in seperate thread

To save time during redering, we now prerender the subpictures.
This avoids framedrops in medcom_wide since the initial rendering
takes more time than we have.

Signed-off-by: Dirk Leber <dirk.leber@avionic-design.de>
---
 src/video_output/vout_subpictures.c | 224 ++++++++++++++++++++++++++++++++++++
 1 file changed, 224 insertions(+)

diff --git a/src/video_output/vout_subpictures.c b/src/video_output/vout_subpictures.c
index 044af75..5d1582e 100644
--- a/src/video_output/vout_subpictures.c
+++ b/src/video_output/vout_subpictures.c
@@ -44,6 +44,8 @@
 #include "vout_internal.h"
 #include "../misc/subpicture.h"
 
+#define USE_EARLY_RENDER
+
 /*****************************************************************************
  * Local prototypes
  *****************************************************************************/
@@ -93,6 +95,16 @@ struct spu_private_t {
 
     /* */
     mtime_t last_sort_date;
+
+#ifdef USE_EARLY_RENDER
+    const vlc_fourcc_t *prerender_chroma_list;
+    video_format_t prerender_fmt_dst;
+    vlc_thread_t prerender_thread;
+    bool prerender_active;
+    vlc_mutex_t prerender_lock;
+    vlc_cond_t prerender_wait;
+    spu_heap_t prerender_heap;
+#endif
 };
 
 /*****************************************************************************
@@ -659,7 +671,116 @@ static void SpuSelectSubpictures(spu_t *spu,
     sys->last_sort_date = render_subtitle_date;
 }
 
+#ifdef USE_EARLY_RENDER
+static bool SpuScaleRegionToCache(spu_t *spu, subpicture_region_t *region,
+        const spu_scale_t scale_size, const vlc_fourcc_t *chroma_list,
+        bool force_refresh)
+{
+    spu_private_t *sys = spu->p;
+    const bool using_palette = region->fmt.i_chroma == VLC_CODEC_YUVP;
+    const unsigned dst_width  = spu_scale_w(region->fmt.i_width,  scale_size);
+    const unsigned dst_height = spu_scale_h(region->fmt.i_height, scale_size);
+
+    /* Code taken from SpuRenderRegion - avoid complex changes */
+    bool convert_chroma = true;
+    for (int i = 0; chroma_list[i] && convert_chroma; i++) {
+        if (region->fmt.i_chroma == chroma_list[i])
+            convert_chroma = false;
+    }
+
+    if (!(sys->scale && sys->scale->p_module &&
+            (!using_palette || (sys->scale_yuvp && sys->scale_yuvp->p_module)) &&
+            (scale_size.w != SCALE_UNIT || scale_size.h != SCALE_UNIT ||
+            using_palette || convert_chroma)))
+        return false;
+
+    /* Destroy the cache if unusable */
+    if (region->p_private) {
+        subpicture_region_private_t *private = region->p_private;
+        bool is_changed = false;
+
+        /* Check resize changes */
+        if (dst_width  != private->fmt.i_width || dst_height != private->fmt.i_height)
+            is_changed = true;
+
+        if (force_refresh)
+            is_changed = true;
+
+        if (convert_chroma && private->fmt.i_chroma != chroma_list[0])
+                is_changed = true;
+
+        if (is_changed) {
+            subpicture_region_private_Delete(private);
+            region->p_private = NULL;
+        }
+    }
+
+    /* Scale if needed into cache */
+    if (region->p_private || dst_width <= 0 || dst_height <= 0)
+        return true;
+    filter_t *scale = sys->scale;
+
+    picture_t *picture = region->p_picture;
+    picture_Hold(picture);
+
+    /* Convert YUVP to YUVA/RGBA first for better scaling quality */
+    if (using_palette) {
+        filter_t *scale_yuvp = sys->scale_yuvp;
+
+        scale_yuvp->fmt_in.video = region->fmt;
+
+        scale_yuvp->fmt_out.video = region->fmt;
+        scale_yuvp->fmt_out.video.i_chroma = chroma_list[0];
+
+        picture = scale_yuvp->pf_video_filter(scale_yuvp, picture);
+        if (!picture) {
+            /* Well we will try conversion+scaling */
+            msg_Warn(spu, "%4.4s to %4.4s conversion failed",
+                     (const char*)&scale_yuvp->fmt_in.video.i_chroma,
+                     (const char*)&scale_yuvp->fmt_out.video.i_chroma);
+        }
+    }
 
+    /* Conversion(except from YUVP)/Scaling */
+    if (picture &&
+        (picture->format.i_width  != dst_width ||
+         picture->format.i_height != dst_height ||
+         (convert_chroma && !using_palette)))
+    {
+        scale->fmt_in.video  = picture->format;
+        scale->fmt_out.video = picture->format;
+        if (convert_chroma)
+            scale->fmt_out.i_codec        =
+            scale->fmt_out.video.i_chroma = chroma_list[0];
+
+        scale->fmt_out.video.i_width  = dst_width;
+        scale->fmt_out.video.i_height = dst_height;
+
+        scale->fmt_out.video.i_visible_width =
+            spu_scale_w(region->fmt.i_visible_width, scale_size);
+        scale->fmt_out.video.i_visible_height =
+            spu_scale_h(region->fmt.i_visible_height, scale_size);
+
+        picture = scale->pf_video_filter(scale, picture);
+        if (!picture)
+            msg_Err(spu, "scaling failed");
+    }
+
+    if (picture) {
+        region->p_private = subpicture_region_private_New(&picture->format);
+        if (region->p_private) {
+            region->p_private->p_picture = picture;
+            if (!region->p_private->p_picture) {
+                subpicture_region_private_Delete(region->p_private);
+                region->p_private = NULL;
+            }
+        } else {
+            picture_Release(picture);
+        }
+    }
+    return true;
+}
+#endif
 
 /**
  * It will transform the provided region into another region suitable for rendering.
@@ -771,6 +892,14 @@ static void SpuRenderRegion(spu_t *spu,
     region_fmt = region->fmt;
     region_picture = region->p_picture;
 
+#ifdef USE_EARLY_RENDER
+    if (SpuScaleRegionToCache(spu, region, scale_size, chroma_list, changed_palette)) {
+        if (region->p_private) {
+            region_fmt     = region->p_private->fmt;
+            region_picture = region->p_private->p_picture;
+        }
+    }
+#else
     bool convert_chroma = true;
     for (int i = 0; chroma_list[i] && convert_chroma; i++) {
         if (region_fmt.i_chroma == chroma_list[i])
@@ -879,6 +1008,7 @@ static void SpuRenderRegion(spu_t *spu,
             region_picture = region->p_private->p_picture;
         }
     }
+#endif
 
     /* Force cropping if requested */
     if (force_crop) {
@@ -1193,6 +1323,60 @@ static void SubSourceAllocationClean(filter_t *filter)
     free(filter->p_owner);
 }
 
+#ifdef USE_EARLY_RENDER
+/*****************************************************************************
+ * Prerender thread
+ *****************************************************************************/
+
+static void *PrerenderThread(void *object)
+{
+    spu_t *spu = object;
+    spu_private_t *sys = spu->p;
+
+    vlc_mutex_lock(&sys->prerender_lock);
+    while (sys->prerender_active) {
+        vlc_cond_wait(&sys->prerender_wait, &sys->prerender_lock);
+        for (int index = 0; index < VOUT_MAX_SUBPICTURES && sys->prerender_active; index++) {
+            spu_heap_entry_t *entry = &sys->prerender_heap.entry[index];
+            subpicture_t *subpic = entry->subpicture;
+
+            if (!subpic)
+                continue;
+
+            for (subpicture_region_t *r = subpic->p_region; r != NULL; r = r->p_next) {
+                const video_format_t *fmt_dst = &sys->prerender_fmt_dst;
+                /* Scaling code is taken from SpuRenderSubpictures */
+
+                /* Compute region scale AR */
+                video_format_t region_fmt = r->fmt;
+                if (region_fmt.i_sar_num <= 0 || region_fmt.i_sar_den <= 0) {
+                    region_fmt.i_sar_num = (int64_t)fmt_dst->i_width  * fmt_dst->i_sar_num * subpic->i_original_picture_height;
+                    region_fmt.i_sar_den = (int64_t)fmt_dst->i_height * fmt_dst->i_sar_den * subpic->i_original_picture_width;
+                    vlc_ureduce(&region_fmt.i_sar_num, &region_fmt.i_sar_den,
+                                region_fmt.i_sar_num, region_fmt.i_sar_den, 65536);
+                }
+                /* Compute scaling from original size to destination size
+                 * FIXME The current scaling ensure that the heights match, the width being
+                 * cropped.
+                 */
+                spu_scale_t scale = spu_scale_createq((int64_t)fmt_dst->i_height                 * fmt_dst->i_sar_den * region_fmt.i_sar_num,
+                                                      (int64_t)subpic->i_original_picture_height * fmt_dst->i_sar_num * region_fmt.i_sar_den,
+                                                      fmt_dst->i_height,
+                                                      subpic->i_original_picture_height);
+                SpuScaleRegionToCache(spu, r, scale, sys->prerender_chroma_list, true);
+            }
+            /* */
+            vlc_mutex_lock(&sys->lock);
+            if (!SpuHeapPush(&sys->heap, subpic))
+                entry->subpicture = NULL;
+            vlc_mutex_unlock(&sys->lock);
+        }
+    }
+    vlc_mutex_unlock(&sys->prerender_lock);
+    return NULL;
+}
+#endif
+
 /*****************************************************************************
  * Public API
  *****************************************************************************/
@@ -1257,6 +1441,15 @@ spu_t *spu_Create(vlc_object_t *object)
     /* */
     sys->last_sort_date = -1;
 
+#ifdef USE_EARLY_RENDER
+    vlc_mutex_init(&sys->prerender_lock);
+    vlc_cond_init(&sys->prerender_wait);
+    SpuHeapInit(&sys->prerender_heap);
+    sys->prerender_active = true;
+    if (vlc_clone(&sys->prerender_thread, PrerenderThread, spu, VLC_THREAD_PRIORITY_LOW))
+        sys->prerender_active = false;
+#endif
+
     return spu;
 }
 
@@ -1269,6 +1462,19 @@ void spu_Destroy(spu_t *spu)
 {
     spu_private_t *sys = spu->p;
 
+#ifdef USE_EARLY_RENDER
+    if (sys->prerender_active) {
+        vlc_mutex_lock(&sys->prerender_lock);
+        sys->prerender_active = false;
+        vlc_cond_signal(&sys->prerender_wait);
+        vlc_mutex_unlock(&sys->prerender_lock);
+        vlc_join(sys->prerender_thread, NULL);
+    }
+    SpuHeapClean(&sys->prerender_heap);
+    vlc_cond_destroy(&sys->prerender_wait);
+    vlc_mutex_destroy(&sys->prerender_lock);
+#endif
+
     if (sys->text)
         FilterRelease(sys->text);
 
@@ -1402,6 +1608,19 @@ void spu_PutSubpicture(spu_t *spu, subpicture_t *subpic)
     for (subpicture_region_t *r = subpic->p_region; r != NULL; r = r->p_next)
         assert(r->p_private == NULL);
 
+#ifdef USE_EARLY_RENDER
+    vlc_mutex_lock(&sys->prerender_lock);
+    if (sys->prerender_active) {
+        if (!SpuHeapPush(&sys->prerender_heap, subpic)) {
+            vlc_cond_signal(&sys->prerender_wait);
+            vlc_mutex_unlock(&sys->prerender_lock);
+            return;
+        }
+        msg_Warn(spu, "subpicture prerender heap full");
+    }
+    vlc_mutex_unlock(&sys->prerender_lock);
+#endif
+
     /* */
     vlc_mutex_lock(&sys->lock);
     if (SpuHeapPush(&sys->heap, subpic)) {
@@ -1458,6 +1677,11 @@ subpicture_t *spu_Render(spu_t *spu,
         chroma_list = vlc_fourcc_IsYUV(fmt_dst->i_chroma) ? chroma_list_default_yuv
                                                           : chroma_list_default_rgb;
 
+#ifdef USE_EARLY_RENDER
+    /* we know the implementation, so it's "save" to hold the pointer */
+    sys->prerender_chroma_list = chroma_list;
+    sys->prerender_fmt_dst     = *fmt_dst,
+#endif
     vlc_mutex_lock(&sys->lock);
 
     unsigned int subpicture_count;
-- 
2.1.0

