From 5de540de667f88068991f5b0c597ae892aa3383c Mon Sep 17 00:00:00 2001
From: Dirk Leber <dirk.leber@avionic-design.de>
Date: Mon, 2 Nov 2015 12:21:35 +0100
Subject: [PATCH] Fix deadlock while canceling thread

Signed-off-by: Dirk Leber <dirk.leber@avionic-design.de>
---
 src/misc/block.c | 44 ++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 44 insertions(+)

diff --git a/src/misc/block.c b/src/misc/block.c
index 9cf832b..3e66e0a 100644
--- a/src/misc/block.c
+++ b/src/misc/block.c
@@ -638,6 +638,7 @@ void block_FifoWake( block_fifo_t *p_fifo )
  *
  * @return a valid block, or NULL if block_FifoWake() was called.
  */
+#if USE_ORIGINAL_CODE
 block_t *block_FifoGet( block_fifo_t *p_fifo )
 {
     block_t *b;
@@ -679,6 +680,49 @@ block_t *block_FifoGet( block_fifo_t *p_fifo )
     b->p_next = NULL;
     return b;
 }
+#else
+
+/* We can see in the original code that if a thread gets cancelled while
+ * block_FifoGet is running, the lock does not alays gets released and will
+ * cause a deadlock later.
+ * The weird thing is that this happed during vlc_cond_broadcast which imho is
+ * not a cancellation point. */
+
+block_t *block_FifoGet( block_fifo_t *p_fifo )
+{
+    block_t *b;
+
+    vlc_testcancel( );
+
+    vlc_mutex_lock( &p_fifo->lock );
+    mutex_cleanup_push( &p_fifo->lock );
+
+    /* Remember vlc_cond_wait() may cause spurious wakeups
+     * (on both Win32 and POSIX) */
+    while( ( p_fifo->p_first == NULL ) && !p_fifo->b_force_wake )
+        vlc_cond_wait( &p_fifo->wait, &p_fifo->lock );
+
+    b = p_fifo->p_first;
+
+    p_fifo->b_force_wake = false;
+
+    if( b != NULL ) {
+        p_fifo->p_first = b->p_next;
+        p_fifo->i_depth--;
+        p_fifo->i_size -= b->i_buffer;
+
+        if( p_fifo->p_first == NULL )
+            p_fifo->pp_last = &p_fifo->p_first;
+
+        /* We don't know how many threads can queue new packets now. */
+        vlc_cond_broadcast( &p_fifo->wait_room );
+
+        b->p_next = NULL;
+    }
+    vlc_cleanup_run();
+    return b;
+}
+#endif
 
 /**
  * Peeks the first block in the FIFO.
-- 
2.4.3

