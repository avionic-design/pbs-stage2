From af322320095780625dc930d6431be3a00e30b5b4 Mon Sep 17 00:00:00 2001
From: Bert van Hall <bert.vanhall@avionic-design.de>
Date: Fri, 24 Jun 2016 15:46:45 +0200
Subject: [PATCH 10/11] dtmfgen: Add an optimized fixed point implementation

The current implementation use floating point arithmetic to generate
the sin wave. However on FPU less hardware this is way too slow,
leading to stuttering sound when playing a DTMF. To overcome this add
a fixed point implementation using a 4th order sin approximation.
The floating version is still available, mostly for reference purposes.

Signed-off-by: Alban Bedel <alban.bedel@avionic-design.de>
Reviewed-by: Soeren Grunewald <soeren.grunewald@avionic-design.de>
Signed-off-by: Bert van Hall <bert.vanhall@avionic-design.de>
---
 src/audiofilters/dtmfgen.c | 87 +++++++++++++++++++++++++++++++++++++++-------
 1 file changed, 74 insertions(+), 13 deletions(-)

diff --git a/src/audiofilters/dtmfgen.c b/src/audiofilters/dtmfgen.c
index 77e532c..26997ef 100644
--- a/src/audiofilters/dtmfgen.c
+++ b/src/audiofilters/dtmfgen.c
@@ -21,11 +21,14 @@ Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 #include "mediastreamer2/msticker.h"
 
 
+#define DTMFGEN_FIXED_POINT
+#ifndef DTMFGEN_FIXED_POINT
 #include <math.h>
 
 #ifndef M_PI
 #define M_PI       3.14159265358979323846
 #endif
+#endif
 
 
 #define NO_SAMPLES_THRESHOLD 100 /*ms*/
@@ -42,8 +45,13 @@ struct DtmfGenState{
 	int nchannels;
 	int dur;
 	int pos;
+#ifdef DTMFGEN_FIXED_POINT
+	int32_t highfreq;
+	int32_t lowfreq;
+#else
 	float highfreq;
 	float lowfreq;
+#endif
 	int nosamples_time;
 	int silence;
 	int amplitude;
@@ -55,6 +63,28 @@ struct DtmfGenState{
 
 typedef struct DtmfGenState DtmfGenState;
 
+#ifdef DTMFGEN_FIXED_POINT
+int32_t scale_freq(int32_t freq, int rate)
+{
+	return ((freq*4) << 13) / rate;
+}
+
+int scale_amplitude(float amp)
+{
+	return amp*0.7*32767.0*16.0;
+}
+#else
+float scale_freq(float freq, int rate)
+{
+	return 2*M_PI*freq/(float)rate;
+}
+
+int scale_amplitude(float amp)
+{
+	return amp*0.7*32767.0;
+}
+#endif
+
 static void dtmfgen_init(MSFilter *f){
 	DtmfGenState *s=(DtmfGenState *)ms_new0(DtmfGenState,1);
 	s->rate=8000;
@@ -64,7 +94,7 @@ static void dtmfgen_init(MSFilter *f){
 	s->nosamples_time=0;
 	s->silence=0;
 	s->default_amplitude=0.2f;
-	s->amplitude=(int)(s->default_amplitude*0.7*32767);
+	s->amplitude=scale_amplitude(s->default_amplitude);
 	s->repeat_count=0;
 	f->data=s;
 }
@@ -155,11 +185,11 @@ static int dtmfgen_put(MSFilter *f, void *arg){
 	}
 	ms_filter_lock(f);
 	s->pos=0;
-	s->lowfreq=s->lowfreq/s->rate;
-	s->highfreq=s->highfreq/s->rate;
+	s->lowfreq=scale_freq(s->lowfreq, s->rate);
+	s->highfreq=scale_freq(s->highfreq, s->rate);
 	s->dur=s->rate/10; /*100 ms duration */
 	s->silence=0;
-	s->amplitude=(int)(s->default_amplitude*32767*0.7);
+	s->amplitude=scale_amplitude(s->default_amplitude);
 	s->current_tone.tone_name[0]=dtmf[0];
 	s->current_tone.tone_name[1]=0;
 	s->current_tone.interval=0;
@@ -178,10 +208,10 @@ static int dtmfgen_play_tone(MSFilter *f, void *arg){
 	s->current_tone=*def;
 	s->pos=0;
 	s->dur=(s->rate*def->duration)/1000;
-	s->lowfreq=((float)def->frequencies[0])/(float)s->rate;
-	s->highfreq=((float)def->frequencies[1])/(float)s->rate;;
+	s->lowfreq=scale_freq(def->frequencies[0],s->rate);
+	s->highfreq=scale_freq(def->frequencies[1],s->rate);
 	s->silence=0;
-	s->amplitude=(int)(def->amplitude* 0.7*32767.0);
+	s->amplitude=scale_amplitude(def->amplitude);
 	s->repeat_count=0;
 	s->playing=TRUE;
 	ms_filter_unlock(f);
@@ -240,16 +270,47 @@ static int dtmfgen_set_amp(MSFilter *f, void *arg){
 	return 0;
 }
 
+#ifdef DTMFGEN_FIXED_POINT
+// A fixed point forth order approximation of sin()
+// The input is in Q13 with a unit of PI/2, the result is in Q12.
+// See http://www.coranac.com/2009/07/sines/ for details.
+static int32_t sin_q12(int32_t x_q13){
+	static const int32_t qN= 13, qA= 12, B=19900, C=3516;
+	int32_t c, y, x = x_q13;
+
+	c= x<<(30-qN);		// Semi-circle info into carry.
+	x -= 1<<qN;		// sine -> cosine calc
+
+	x= x<<(31-qN);		// Mask with PI
+	x= x>>(31-qN);		// Note: SIGNED shift! (to qN)
+	x= x*x>>(2*qN-14);	// x=x^2 To Q14
+
+	y= B - (x*C>>14);	// B - x^2*C
+	y= (1<<qA)-(x*y>>16);	// A - x^2*(B-x^2*C)
+
+	return c>=0 ? y : -y;
+}
+
+// Compute a DTMF sample
+// amp is the amplitude in Q4 format
+// f4r is 4*freq/rate in Q13 format
+// pos is the current position (Q0)
+static int16_t dtmf_sample(int amp_q4, int32_t f4r_q13, int pos)
+{
+	return (amp_q4 * sin_q12(f4r_q13*pos)) >> 16;
+}
+#else
+static int16_t dtmf_sample(int amp, float freq, int pos)
+{
+	return ((float)amp)*sin((float)pos*freq);
+}
+#endif
 
 static void write_dtmf(DtmfGenState *s , int16_t *sample, int nsamples){
 	int i, j;
-	int16_t dtmf_sample;
 	for (i=0;i<nsamples && s->pos<s->dur;i++,s->pos++){
-		dtmf_sample = (int16_t)(((float)s->amplitude)*sin(2*M_PI*(float)s->pos*s->lowfreq));
-		if (s->highfreq!=0) dtmf_sample += (int16_t)(((float)s->amplitude)*sin(2*M_PI*(float)s->pos*s->highfreq));
-		for (j = 0; j < s->nchannels; j++) {
-			sample[(i * s->nchannels) + j] = dtmf_sample;
-		}
+		sample[i]=dtmf_sample(s->amplitude, s->lowfreq, s->pos);
+		if (s->highfreq!=0) sample[i]+=dtmf_sample(s->amplitude, s->highfreq, s->pos);
 	}
 	for (;i<nsamples;++i){
 		for (j = 0; j < s->nchannels; j++) {
-- 
2.1.0

