Subversion Revision: 105030
diff --git a/Source/JavaScriptCore/ChangeLog b/Source/JavaScriptCore/ChangeLog
index 613d4cb663f5d12b2489fcaca06c2be7774ef8c3..c16fe651a46b0aa17f4eae04be805f4391ec70a9 100644
--- a/Source/JavaScriptCore/ChangeLog
+++ b/Source/JavaScriptCore/ChangeLog
@@ -1,3 +1,22 @@
+2012-01-15  Rob Buis  <rbuis@rim.com>
+
+        Fix alignment warnings in ARMv7
+        https://bugs.webkit.org/show_bug.cgi?id=55368
+
+        Reviewed by NOBODY (OOPS!).
+
+        Use reinterpret_cast_ptr and static_cast to get rid of alignment issues in ARMv7 code.
+
+        * heap/HandleTypes.h:
+        (JSC::HandleTypes::getFromSlot):
+        * heap/MarkedBlock.cpp:
+        (JSC::MarkedBlock::specializedSweep):
+        * heap/MarkedBlock.h:
+        (JSC::MarkedBlock::forEachCell):
+        * runtime/WriteBarrier.h:
+        (JSC::WriteBarrierBase::get):
+        (JSC::WriteBarrierBase::unvalidatedGet):
+
 2012-01-16  Carlos Garcia Campos  <cgarcia@igalia.com>
 
         Unreviewed. Fix make distcheck.
diff --git a/Source/JavaScriptCore/heap/HandleTypes.h b/Source/JavaScriptCore/heap/HandleTypes.h
index 780ab85cdd5422aa3769b5aa3a412907f6e8e370..bdfbcfda312949c3dfe55dde91474cc7a92e88f3 100644
--- a/Source/JavaScriptCore/heap/HandleTypes.h
+++ b/Source/JavaScriptCore/heap/HandleTypes.h
@@ -35,7 +35,7 @@ typedef JSValue* HandleSlot;
 
 template<typename T> struct HandleTypes {
     typedef T* ExternalType;
-    static ExternalType getFromSlot(HandleSlot slot) { return (slot && *slot) ? reinterpret_cast<ExternalType>(slot->asCell()) : 0; }
+    static ExternalType getFromSlot(HandleSlot slot) { return (slot && *slot) ? reinterpret_cast<ExternalType>(static_cast<void*>(slot->asCell())) : 0; }
     static JSValue toJSValue(T* cell) { return reinterpret_cast<JSCell*>(cell); }
     template<typename U> static void validateUpcast() { T* temp; temp = (U*)0; }
 };
diff --git a/Source/JavaScriptCore/heap/MarkedBlock.cpp b/Source/JavaScriptCore/heap/MarkedBlock.cpp
index 771c9c082f5cfeecfd5e32a9e403b88e4334fac1..bf833cb558e2bd981579cb2ac29a950a1a3668f3 100644
--- a/Source/JavaScriptCore/heap/MarkedBlock.cpp
+++ b/Source/JavaScriptCore/heap/MarkedBlock.cpp
@@ -88,7 +88,7 @@ MarkedBlock::FreeCell* MarkedBlock::specializedSweep()
         if (blockState == Marked && m_marks.get(i))
             continue;
 
-        JSCell* cell = reinterpret_cast<JSCell*>(&atoms()[i]);
+        JSCell* cell = reinterpret_cast_ptr<JSCell*>(&atoms()[i]);
         if (blockState == Zapped && !cell->isZapped())
             continue;
 
diff --git a/Source/JavaScriptCore/heap/MarkedBlock.h b/Source/JavaScriptCore/heap/MarkedBlock.h
index 8c665dd5bed5b2413dd30217ff74e4007af1c97a..7f7151af9aeff722237d18ccea6d3a2abdeed7d3 100644
--- a/Source/JavaScriptCore/heap/MarkedBlock.h
+++ b/Source/JavaScriptCore/heap/MarkedBlock.h
@@ -320,7 +320,7 @@ namespace JSC {
     template <typename Functor> inline void MarkedBlock::forEachCell(Functor& functor)
     {
         for (size_t i = firstAtom(); i < m_endAtom; i += m_atomsPerCell) {
-            JSCell* cell = reinterpret_cast<JSCell*>(&atoms()[i]);
+            JSCell* cell = reinterpret_cast_ptr<JSCell*>(&atoms()[i]);
             if (!isLive(cell))
                 continue;
 
diff --git a/Source/JavaScriptCore/runtime/WriteBarrier.h b/Source/JavaScriptCore/runtime/WriteBarrier.h
index a7bd7a100dca62300023cb8569758faea96518ab..6ac52b7c712adabc73aec13476b5b0b9c94e257d 100644
--- a/Source/JavaScriptCore/runtime/WriteBarrier.h
+++ b/Source/JavaScriptCore/runtime/WriteBarrier.h
@@ -93,7 +93,7 @@ public:
     {
         if (m_cell)
             validateCell(m_cell);
-        return reinterpret_cast<T*>(m_cell);
+        return reinterpret_cast<T*>(static_cast<void*>(m_cell));
     }
 
     T* operator*() const
@@ -128,7 +128,7 @@ public:
     }
 
 #if ENABLE(GC_VALIDATION)
-    T* unvalidatedGet() const { return reinterpret_cast<T*>(m_cell); }
+    T* unvalidatedGet() const { return reinterpret_cast<T*>(static_cast<void*>(m_cell)); }
 #endif
 
 private:
