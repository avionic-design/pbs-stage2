From 20e6c20a0d29bfbd1d41ed8ae662565ce60a46d0 Mon Sep 17 00:00:00 2001
From: Thierry Reding <thierry.reding@avionic-design.de>
Date: Thu, 1 Nov 2012 15:45:14 +0100
Subject: [PATCH 6/6] gtk: add support for gtk-dnd-drag-threshold property.

The gtk-dnd-drag-threshold property is used to prevent unwanted dnd actions
with non pixel perfect input devices as touchscreens.

Signed-off-by: Julian Scheel <julian@jusst.de>
---
 Source/WebCore/page/EventHandler.cpp        |  2 ++
 Source/WebCore/page/gtk/EventHandlerGtk.cpp | 47 +++++++++++++++++++++++++++++
 2 files changed, 49 insertions(+)

diff --git a/Source/WebCore/page/EventHandler.cpp b/Source/WebCore/page/EventHandler.cpp
index 04f636e..7528e4c 100644
--- a/Source/WebCore/page/EventHandler.cpp
+++ b/Source/WebCore/page/EventHandler.cpp
@@ -3038,6 +3038,7 @@ void EventHandler::defaultKeyboardEventHandler(KeyboardEvent* event)
 }
 
 #if ENABLE(DRAG_SUPPORT)
+#if !PLATFORM(GTK)
 bool EventHandler::dragHysteresisExceeded(const IntPoint& floatDragViewportLocation) const
 {
     FloatPoint dragViewportLocation(floatDragViewportLocation.x(), floatDragViewportLocation.y());
@@ -3072,6 +3073,7 @@ bool EventHandler::dragHysteresisExceeded(const FloatPoint& dragViewportLocation
     
     return abs(delta.width()) >= threshold || abs(delta.height()) >= threshold;
 }
+#endif
     
 void EventHandler::freeClipboard()
 {
diff --git a/Source/WebCore/page/gtk/EventHandlerGtk.cpp b/Source/WebCore/page/gtk/EventHandlerGtk.cpp
index 368cfe0..42716ec 100644
--- a/Source/WebCore/page/gtk/EventHandlerGtk.cpp
+++ b/Source/WebCore/page/gtk/EventHandlerGtk.cpp
@@ -26,6 +26,7 @@
 #include "config.h"
 #include "EventHandler.h"
 
+#include "Chrome.h"
 #include "ClipboardGtk.h"
 #include "FloatPoint.h"
 #include "FocusController.h"
@@ -39,6 +40,7 @@
 #include "PlatformWheelEvent.h"
 #include "RenderWidget.h"
 #include "Scrollbar.h"
+#include <gtk/gtk.h>
 
 namespace WebCore {
 
@@ -99,6 +101,51 @@ PassRefPtr<Clipboard> EventHandler::createDraggingClipboard() const
     return ClipboardGtk::create(ClipboardWritable, DataObjectGtk::create(), Clipboard::DragAndDrop, m_frame);
 }
 
+bool EventHandler::dragHysteresisExceeded(const IntPoint& dragViewportLocation) const
+{
+    FrameView* view = m_frame->view();
+    if (!view)
+        return false;
+
+    IntPoint dragLocation = view->windowToContents(dragViewportLocation);
+    IntSize delta = dragLocation - m_mouseDownPos;
+
+    int threshold = GeneralDragHysteresis;
+    switch (dragState().m_dragType) {
+    case DragSourceActionSelection:
+        threshold = TextDragHysteresis;
+        break;
+    case DragSourceActionImage:
+        threshold = ImageDragHysteresis;
+        break;
+    case DragSourceActionLink:
+        threshold = LinkDragHysteresis;
+        break;
+    case DragSourceActionDHTML:
+        break;
+    case DragSourceActionNone:
+    case DragSourceActionAny:
+        ASSERT_NOT_REACHED();
+    }
+
+    Page* page = m_frame->page();
+    if (page) {
+        Chrome* chrome = page->chrome();
+        if (chrome) {
+            GtkWidget* client = GTK_WIDGET(chrome->platformPageClient());
+            gint widgetDragHysteresis = 0;
+            if (client) {
+                g_object_get(gtk_widget_get_settings(client),
+                    "gtk-dnd-drag-threshold", &widgetDragHysteresis,
+                    0);
+                threshold = max(widgetDragHysteresis, threshold);
+            }
+        }
+    }
+
+    return abs(delta.width()) >= threshold || abs(delta.height()) >= threshold;
+}
+
 bool EventHandler::passMousePressEventToSubframe(MouseEventWithHitTestResults& mev, Frame* subframe)
 {
     subframe->eventHandler()->handleMousePressEvent(mev.event());
-- 
1.8.0

