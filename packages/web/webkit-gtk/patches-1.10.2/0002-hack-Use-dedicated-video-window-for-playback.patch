From 2b862796561f6a60c9a7b27f2da878865f7acd19 Mon Sep 17 00:00:00 2001
From: Julian Scheel <julian@jusst.de>
Date: Mon, 2 Dec 2013 09:19:53 +0100
Subject: [PATCH 2/3] hack: Use dedicated video window for playback

To be able to use accelerated video rendering on nvidia tegra platforms we
cannot use the cairo video sink, which is required to render video directly into
the webpage. Instead we abuse the MediaPlayer to always render into a fullscreen
window, which can be drawn to by nvxvmimagesink.
To make this usable some further hacks are required, like pausing playback on
clicking/touching the video window, so that it automatically hides and the user
can control the browser again.

Change-Id: I2b132afbe2e3eac9feeac43666f63a476dd81aca
Signed-off-by: Julian Scheel <julian@jusst.de>
---
 .../graphics/gstreamer/GStreamerGWorld.cpp         |   4 +
 .../gstreamer/MediaPlayerPrivateGStreamer.cpp      | 147 ++++++++++++++++++++-
 .../gstreamer/MediaPlayerPrivateGStreamer.h        |  19 +++
 .../graphics/gstreamer/PlatformVideoWindowGtk.cpp  |   4 +-
 4 files changed, 171 insertions(+), 3 deletions(-)

diff --git a/Source/WebCore/platform/graphics/gstreamer/GStreamerGWorld.cpp b/Source/WebCore/platform/graphics/gstreamer/GStreamerGWorld.cpp
index fa088df..de0f8ae 100644
--- a/Source/WebCore/platform/graphics/gstreamer/GStreamerGWorld.cpp
+++ b/Source/WebCore/platform/graphics/gstreamer/GStreamerGWorld.cpp
@@ -21,6 +21,8 @@
 #include "GStreamerGWorld.h"
 #if ENABLE(VIDEO) && USE(GSTREAMER) && !defined(GST_API_VERSION_1)
 
+#define GST_NVXVIMAGESINK
+
 #include "GRefPtrGStreamer.h"
 #include <gst/gst.h>
 #include <gst/interfaces/xoverlay.h>
@@ -60,7 +62,9 @@ GStreamerGWorld::GStreamerGWorld(GstElement* pipeline)
 {
     // XOverlay messages need to be handled synchronously.
     GstBus* bus = gst_pipeline_get_bus(GST_PIPELINE(m_pipeline));
+#ifndef GST_NVXVIMAGESINK
     gst_bus_set_sync_handler(bus, gst_bus_sync_signal_handler, this);
+#endif
     g_signal_connect(bus, "sync-message::element", G_CALLBACK(gstGWorldSyncMessageCallback), this);
     gst_object_unref(bus);
 }
diff --git a/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp b/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp
index 24975da..7556a9c 100644
--- a/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp
+++ b/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp
@@ -42,6 +42,7 @@
 #include "MIMETypeRegistry.h"
 #include "MediaPlayer.h"
 #include "NotImplemented.h"
+#include "PlatformVideoWindow.h"
 #include "SecurityOrigin.h"
 #include "TimeRanges.h"
 #include "VideoSinkGStreamer.h"
@@ -57,8 +58,12 @@
 #include <gst/audio/streamvolume.h>
 #else
 #include <gst/interfaces/streamvolume.h>
+#include <gst/interfaces/xoverlay.h>
 #endif
 
+#include <gtk/gtk.h>
+#include <gdk/gdk.h>
+
 // GstPlayFlags flags from playbin2. It is the policy of GStreamer to
 // not publicly expose element-specific enums. That's why this
 // GstPlayFlags enum has been copied here.
@@ -98,6 +103,14 @@ static int greatestCommonDivisor(int a, int b)
     return ABS(a);
 }
 
+#ifdef GST_NVXVIMAGESINK
+static GstBusSyncReply mediaPlayerBusSyncHandler(GstBus *bus,
+    GstMessage* message, MediaPlayerPrivateGStreamer *player)
+{
+    return player->handleMessageSync(message);
+}
+#endif
+
 static gboolean mediaPlayerPrivateMessageCallback(GstBus*, GstMessage* message, MediaPlayerPrivateGStreamer* player)
 {
     return player->handleMessage(message);
@@ -202,6 +215,30 @@ bool MediaPlayerPrivateGStreamer::isAvailable()
     return factory;
 }
 
+#ifdef GST_NVXVIMAGESINK
+bool MediaPlayerPrivateGStreamer::setXOverlay()
+{
+
+    g_debug(" > %s()", __func__);
+
+    if (m_window) {
+        g_debug("   gst_x_overlay_set_window_handle()....");
+#if GST_CHECK_VERSION(1, 0, 0)
+        gst_video_overlay_set_window_handle(GST_VIDEO_OVERLAY(m_webkitVideoSink),
+                m_window->videoWindowId());
+#else
+        gst_x_overlay_set_window_handle(GST_X_OVERLAY(m_webkitVideoSink),
+                m_window->videoWindowId());
+#endif
+    } else {
+        g_debug("   window not ready");
+        return false;
+    }
+
+    return true;
+}
+#endif
+
 MediaPlayerPrivateGStreamer::MediaPlayerPrivateGStreamer(MediaPlayer* player)
     : m_player(player)
     , m_playBin(0)
@@ -243,9 +280,18 @@ MediaPlayerPrivateGStreamer::MediaPlayerPrivateGStreamer(MediaPlayer* player)
     , m_webkitAudioSink(0)
     , m_totalBytes(-1)
     , m_originalPreloadWasAutoAndWasOverridden(false)
+#ifdef GST_NVXVIMAGESINK
+    , m_signalPaused(true)
+#endif
 {
     if (initializeGStreamerAndRegisterWebKitElements())
         createGSTPlayBin();
+
+#ifdef GST_NVXVIMAGESINK
+    /* Create the window used for accelerated video rendering */
+    m_window = PlatformVideoWindow::createWindow();
+    gdk_display_sync(gdk_display_get_default());
+#endif
 }
 
 MediaPlayerPrivateGStreamer::~MediaPlayerPrivateGStreamer()
@@ -403,14 +449,39 @@ void MediaPlayerPrivateGStreamer::prepareToPlay()
 
 void MediaPlayerPrivateGStreamer::play()
 {
+#ifdef GST_NVXVIMAGESINK
+    /* HACK: If a pause action is pending ignore the play command.
+     * This is used to workaround crappy html5 video players which try
+     * to avoid pause events */
+    if (m_signalPaused)
+        return;
+
+    if (m_window) {
+        gtk_widget_show(m_window->window());
+        gtk_window_fullscreen(GTK_WINDOW(m_window->window()));
+    }
+#endif
     if (changePipelineState(GST_STATE_PLAYING)) {
         m_isEndReached = false;
         LOG_MEDIA_MESSAGE("Play");
     }
 }
 
+#ifdef GST_NVXVIMAGESINK
+void MediaPlayerPrivateGStreamer::pauseSignalled()
+{
+    m_signalPaused = true;
+    pause();
+}
+#endif
+
 void MediaPlayerPrivateGStreamer::pause()
 {
+#ifdef GST_NVXVIMAGESINK
+    if (m_window)
+        gtk_widget_hide(m_window->window());
+#endif
+
     if (m_isEndReached)
         return;
 
@@ -771,6 +842,51 @@ PassRefPtr<TimeRanges> MediaPlayerPrivateGStreamer::buffered() const
     return timeRanges.release();
 }
 
+#ifdef GST_NVXVIMAGESINK
+static gboolean window_clicked(GtkWidget *widget, GdkEventButton *event,
+                            gpointer user_data)
+{
+    MediaPlayerPrivateGStreamer *player = (MediaPlayerPrivateGStreamer*)user_data;
+    player->pauseSignalled();
+    return true;
+}
+
+GstBusSyncReply MediaPlayerPrivateGStreamer::handleMessageSync(GstMessage* message)
+{
+    GstMessageType type = GST_MESSAGE_TYPE(message);
+    GstBusSyncReply ret = GST_BUS_PASS;
+
+    if (type == GST_MESSAGE_ELEMENT) {
+        const GstStructure *structure = message->structure;
+        const gchar* name;
+
+        if (!structure)
+            return ret;
+
+        name = gst_structure_get_name(structure);
+        if (!name)
+            return ret;
+
+        if (g_strcmp0(name, "prepare-xwindow-id") == 0) {
+            g_debug("    %s", name);
+            if (m_window) {
+                g_signal_connect(GTK_WIDGET(m_window->window()),
+                                 "button-press-event",
+                                 G_CALLBACK(window_clicked), this);
+
+                m_window->prepareForOverlay(message);
+                gst_x_overlay_set_window_handle(GST_X_OVERLAY(m_webkitVideoSink),
+                        m_window->videoWindowId());
+            }
+        }
+        gst_message_unref(message);
+        ret = GST_BUS_DROP;
+    }
+
+    return ret;
+}
+#endif
+
 gboolean MediaPlayerPrivateGStreamer::handleMessage(GstMessage* message)
 {
     GOwnPtr<GError> err;
@@ -828,6 +944,8 @@ gboolean MediaPlayerPrivateGStreamer::handleMessage(GstMessage* message)
         break;
     case GST_MESSAGE_EOS:
         LOG_MEDIA_MESSAGE("End of Stream");
+        if (m_window)
+            gtk_widget_hide(m_window->window());
         didEnd();
         break;
     case GST_MESSAGE_STATE_CHANGED:
@@ -847,6 +965,13 @@ gboolean MediaPlayerPrivateGStreamer::handleMessage(GstMessage* message)
             GstState oldState, newState;
             gst_message_parse_state_changed(message, &oldState, &newState, 0);
 
+#ifdef GST_NVXVIMAGESINK
+            if (newState == GST_STATE_PAUSED && m_signalPaused) {
+                m_signalPaused = false;
+                m_player->playbackStateChanged();
+            }
+#endif
+
             CString dotFileName = String::format("webkit-video.%s_%s",
                                                  gst_element_state_get_name(oldState),
                                                  gst_element_state_get_name(newState)).utf8();
@@ -1702,12 +1827,20 @@ bool MediaPlayerPrivateGStreamer::hasSingleSecurityOrigin() const
 
 bool MediaPlayerPrivateGStreamer::supportsFullscreen() const
 {
+#ifdef GST_NVXVIMAGESINK
+    /* Actually the nvxvimagesink is always running fullscreen, so this is a
+     * little bit of cheating. But it is less error-prone when a website thinks
+     * there is no fullscreen, as it does not try to interact with fullscreen
+     * usage then. */
+    return false;
+#else
 #if PLATFORM(MAC) && !PLATFORM(IOS) && __MAC_OS_X_VERSION_MIN_REQUIRED == 1050
     // See <rdar://problem/7389945>
     return false;
 #else
     return true;
 #endif
+#endif
 }
 
 PlatformMedia MediaPlayerPrivateGStreamer::platformMedia() const
@@ -1766,7 +1899,10 @@ void MediaPlayerPrivateGStreamer::createGSTPlayBin()
 
     GstBus* bus = gst_pipeline_get_bus(GST_PIPELINE(m_playBin));
     gst_bus_add_signal_watch(bus);
+    gst_bus_set_sync_handler(bus, (GstBusSyncHandler)mediaPlayerBusSyncHandler, this);
+#ifdef GST_NVXVIMAGESINK
     g_signal_connect(bus, "message", G_CALLBACK(mediaPlayerPrivateMessageCallback), this);
+#endif
     gst_object_unref(bus);
 
     g_object_set(m_playBin, "mute", m_player->muted(), NULL);
@@ -1777,15 +1913,22 @@ void MediaPlayerPrivateGStreamer::createGSTPlayBin()
     g_signal_connect(m_playBin, "video-changed", G_CALLBACK(mediaPlayerPrivateVideoChangedCallback), this);
     g_signal_connect(m_playBin, "audio-changed", G_CALLBACK(mediaPlayerPrivateAudioChangedCallback), this);
 
+#ifndef GST_NVXVIMAGESINK
 #ifndef GST_API_VERSION_1
     m_webkitVideoSink = webkitVideoSinkNew(m_gstGWorld.get());
 #else
     m_webkitVideoSink = webkitVideoSinkNew();
 #endif
-    m_videoSinkPad = adoptGRef(gst_element_get_static_pad(m_webkitVideoSink, "sink"));
 
     g_signal_connect(m_webkitVideoSink, "repaint-requested", G_CALLBACK(mediaPlayerPrivateRepaintCallback), this);
-
+#else
+    m_webkitVideoSink = gst_element_factory_make("nvxvimagesink", "videosink");
+    /* Fall back to xvimagesink if nvxvimagesink is not existent. This is mainly
+     * to ease testing on non-nvidia systems. */
+    if (!m_webkitVideoSink)
+        m_webkitVideoSink = gst_element_factory_make("xvimagesink", "videosink");
+#endif
+    m_videoSinkPad = adoptGRef(gst_element_get_static_pad(m_webkitVideoSink, "sink"));
 
 #ifndef GST_API_VERSION_1
     m_videoSinkBin = gst_bin_new("sink");
diff --git a/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.h b/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.h
index d14d004..b143d2e 100644
--- a/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.h
+++ b/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.h
@@ -24,8 +24,13 @@
 #define MediaPlayerPrivateGStreamer_h
 #if ENABLE(VIDEO) && USE(GSTREAMER)
 
+#define GST_NVXVIMAGESINK
+
 #include "GRefPtrGStreamer.h"
 #include "MediaPlayerPrivate.h"
+#ifdef GST_NVXVIMAGESINK
+#include "PlatformVideoWindow.h"
+#endif
 #include "Timer.h"
 
 #include <glib.h>
@@ -126,6 +131,11 @@ class MediaPlayerPrivateGStreamer : public MediaPlayerPrivateInterface {
 
             MediaPlayer::MovieLoadType movieLoadType() const;
 
+#ifdef GST_NVXVIMAGESINK
+            GstBusSyncReply handleMessageSync(GstMessage*);
+            void pauseSignalled();
+#endif
+
         private:
             MediaPlayerPrivateGStreamer(MediaPlayer*);
 
@@ -155,6 +165,10 @@ class MediaPlayerPrivateGStreamer : public MediaPlayerPrivateInterface {
             virtual String engineDescription() const { return "GStreamer"; }
             bool isLiveStream() const { return m_isStreaming; }
 
+#ifdef GST_NVXVIMAGESINK
+            bool setXOverlay();
+#endif
+
         private:
             MediaPlayer* m_player;
             GstElement* m_playBin;
@@ -203,6 +217,11 @@ class MediaPlayerPrivateGStreamer : public MediaPlayerPrivateInterface {
             mutable IntSize m_videoSize;
             KURL m_url;
             bool m_originalPreloadWasAutoAndWasOverridden;
+
+#ifdef GST_NVXVIMAGESINK
+            RefPtr<PlatformVideoWindow> m_window;
+            bool m_signalPaused;
+#endif
     };
 }
 
diff --git a/Source/WebCore/platform/graphics/gstreamer/PlatformVideoWindowGtk.cpp b/Source/WebCore/platform/graphics/gstreamer/PlatformVideoWindowGtk.cpp
index 7a01472..70cee83 100644
--- a/Source/WebCore/platform/graphics/gstreamer/PlatformVideoWindowGtk.cpp
+++ b/Source/WebCore/platform/graphics/gstreamer/PlatformVideoWindowGtk.cpp
@@ -32,7 +32,9 @@ using namespace WebCore;
 PlatformVideoWindow::PlatformVideoWindow()
 {
     m_window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
-    gtk_widget_set_events(m_window, GDK_POINTER_MOTION_MASK | GDK_KEY_PRESS_MASK | GDK_FOCUS_CHANGE_MASK);
+    gtk_widget_set_events(m_window, GDK_POINTER_MOTION_MASK |
+                        GDK_KEY_PRESS_MASK | GDK_FOCUS_CHANGE_MASK |
+                        GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK);
 
     m_videoWindow = gtk_drawing_area_new();
     gtk_widget_set_double_buffered(m_videoWindow, FALSE);
-- 
1.8.5.2

