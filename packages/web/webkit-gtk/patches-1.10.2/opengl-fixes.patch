From a9e071860714b5bbe8e03ca0ada1f1fe53ca5e36 Mon Sep 17 00:00:00 2001
From: Thierry Reding <thierry.reding@avionic-design.de>
Date: Thu, 1 Nov 2012 15:13:18 +0100
Subject: [PATCH 3/6] Fix OpenGL build issues

Originally-by: Siraj Razick  <siraj.razick@collabora.co.uk>
Signed-off-by: Thierry Reding <thierry.reding@avionic-design.de>
---
 Source/WebCore/ChangeLog                           | 17 ++++++++++++
 .../platform/gtk/RedirectedXCompositeWindow.cpp    |  3 +++
 .../platform/gtk/RedirectedXCompositeWindow.h      |  4 +++
 Source/WebKit/gtk/ChangeLog                        | 22 ++++++++++++++++
 .../AcceleratedCompositingContextClutter.cpp       | 30 +++++++++++-----------
 5 files changed, 61 insertions(+), 15 deletions(-)

diff --git a/Source/WebCore/ChangeLog b/Source/WebCore/ChangeLog
index 1be7976..68f27fb 100644
--- a/Source/WebCore/ChangeLog
+++ b/Source/WebCore/ChangeLog
@@ -1,3 +1,20 @@
+2012-09-12  Siraj Razick  <siraj.razick@collabora.co.uk>
+
+        [GTK] Protect RedirectedXCompositeWindow with USE(GLX) when building the clutter AC backend
+        https://bugs.webkit.org/show_bug.cgi?id=96165
+
+        Reviewed by Martin Robinson.
+
+        RedirectedXCompositeWindow.cpp and RedirectedXCompositeWindow.h files requies openGL specific
+        headers to compile so when we build webkit clutter AC backend these files failed to compile,
+        This patch protects these two files with USE(GLX) when building webkit with Clutter AC backend.
+
+        No new tests since this is a build fix
+
+        * platform/gtk/RedirectedXCompositeWindow.cpp:
+        * platform/gtk/RedirectedXCompositeWindow.h:
+        protects both the files with USE(GLX)
+
 2012-10-16  Zan Dobersek  <zandobersek@gmail.com>
 
         [GStreamer] GstBuffer ref race in WebKitWebAudioSrcLoop
diff --git a/Source/WebCore/platform/gtk/RedirectedXCompositeWindow.cpp b/Source/WebCore/platform/gtk/RedirectedXCompositeWindow.cpp
index c173712..1f802f5 100644
--- a/Source/WebCore/platform/gtk/RedirectedXCompositeWindow.cpp
+++ b/Source/WebCore/platform/gtk/RedirectedXCompositeWindow.cpp
@@ -27,6 +27,7 @@
 #include "config.h"
 #include "RedirectedXCompositeWindow.h"
 
+#if USE(GLX)
 #include "GLContextGLX.h"
 #include <GL/glx.h>
 #include <X11/extensions/Xcomposite.h>
@@ -262,3 +263,5 @@ void RedirectedXCompositeWindow::callDamageNotifyCallback()
 }
 
 } // namespace WebCore
+
+#endif // USE(GLX)
diff --git a/Source/WebCore/platform/gtk/RedirectedXCompositeWindow.h b/Source/WebCore/platform/gtk/RedirectedXCompositeWindow.h
index 73fe917..865be3b 100644
--- a/Source/WebCore/platform/gtk/RedirectedXCompositeWindow.h
+++ b/Source/WebCore/platform/gtk/RedirectedXCompositeWindow.h
@@ -27,6 +27,8 @@
 #ifndef  RedirectedXCompositeWindow_h
 #define  RedirectedXCompositeWindow_h
 
+#if USE(GLX)
+
 #include "GLContextGLX.h"
 #include "IntSize.h"
 #include "RefPtrCairo.h"
@@ -76,4 +78,6 @@ private:
 
 } // namespace WebCore
 
+#endif // USE(GLX)
+
 #endif // RedirectedXCompositeWindow_h
diff --git a/Source/WebKit/gtk/ChangeLog b/Source/WebKit/gtk/ChangeLog
index e89355f..61689e3 100644
--- a/Source/WebKit/gtk/ChangeLog
+++ b/Source/WebKit/gtk/ChangeLog
@@ -1,3 +1,25 @@
+2012-09-12  Siraj Razick  <siraj.razick@collabora.co.uk>
+
+        [GTK] Update AcceleratedCompositingContextClutter to match AcceleratedCompositingContext.h API update
+        https://bugs.webkit.org/show_bug.cgi?id=96165
+
+        Reviewed by Martin Robinson.
+
+        Due to the refactoring done in bug #90085 AcceleratedCompositingContext API changed, as a result
+        AcceleratedCompositingContextClutter doesn't compile anymore. This patch is to update the
+        AcceleratedCompositingContextClutter implementations to match the API update, and Make webkit
+        AC backend compile again.
+
+        * WebCoreSupport/AcceleratedCompositingContextClutter.cpp:
+        (WebKit::AcceleratedCompositingContext::AcceleratedCompositingContext):
+        (WebKit::AcceleratedCompositingContext::~AcceleratedCompositingContext):
+        (WebKit::AcceleratedCompositingContext::setRootCompositingLayer):
+        (WebKit::AcceleratedCompositingContext::setNonCompositedContentsNeedDisplay):
+        (WebKit::flushAndRenderLayersCallback):
+        (WebKit::AcceleratedCompositingContext::scheduleLayerFlush):
+        (WebKit::AcceleratedCompositingContext::flushPendingLayerChanges):
+        (WebKit::AcceleratedCompositingContext::flushAndRenderLayers):
+
 2012-12-09  Gustavo Noronha Silva  <gns@gnome.org>
 
         Reviewed by Martin Robinson.
diff --git a/Source/WebKit/gtk/WebCoreSupport/AcceleratedCompositingContextClutter.cpp b/Source/WebKit/gtk/WebCoreSupport/AcceleratedCompositingContextClutter.cpp
index 6fe0c36..451117a 100644
--- a/Source/WebKit/gtk/WebCoreSupport/AcceleratedCompositingContextClutter.cpp
+++ b/Source/WebKit/gtk/WebCoreSupport/AcceleratedCompositingContextClutter.cpp
@@ -36,7 +36,7 @@ namespace WebKit {
 
 AcceleratedCompositingContext::AcceleratedCompositingContext(WebKitWebView* webView)
     : m_webView(webView)
-    , m_syncTimerCallbackId(0)
+    , m_layerFlushTimerCallbackId(0)
     , m_rootGraphicsLayer(0)
     , m_rootLayerEmbedder(0)
 {
@@ -44,8 +44,8 @@ AcceleratedCompositingContext::AcceleratedCompositingContext(WebKitWebView* webV
 
 AcceleratedCompositingContext::~AcceleratedCompositingContext()
 {
-    if (m_syncTimerCallbackId)
-        g_source_remove(m_syncTimerCallbackId);
+    if (m_layerFlushTimerCallbackId)
+        g_source_remove(m_layerFlushTimerCallbackId);
 }
 
 bool AcceleratedCompositingContext::enabled()
@@ -59,7 +59,7 @@ bool AcceleratedCompositingContext::renderLayersToWindow(cairo_t*, const IntRect
     return false;
 }
 
-void AcceleratedCompositingContext::attachRootGraphicsLayer(GraphicsLayer* graphicsLayer)
+void AcceleratedCompositingContext::setRootCompositingLayer(GraphicsLayer* graphicsLayer)
 {
     if (!graphicsLayer) {
         gtk_container_remove(GTK_CONTAINER(m_webView), m_rootLayerEmbedder);
@@ -86,7 +86,7 @@ void AcceleratedCompositingContext::attachRootGraphicsLayer(GraphicsLayer* graph
     }
 }
 
-void AcceleratedCompositingContext::scheduleRootLayerRepaint(const IntRect& rect)
+void AcceleratedCompositingContext::setNonCompositedContentsNeedDisplay(const IntRect& rect)
 {
     if (!m_rootGraphicsLayer)
         return;
@@ -112,34 +112,34 @@ void AcceleratedCompositingContext::resizeRootLayer(const IntSize& size)
     gtk_widget_size_allocate(GTK_WIDGET(m_rootLayerEmbedder), &allocation);
 }
 
-static gboolean syncLayersTimeoutCallback(AcceleratedCompositingContext* context)
+static gboolean flushAndRenderLayersCallback(AcceleratedCompositingContext* context)
 {
-    context->syncLayersTimeout();
+    context->flushAndRenderLayers();
     return FALSE;
 }
 
-void AcceleratedCompositingContext::markForSync()
+void AcceleratedCompositingContext::scheduleLayerFlush()
 {
-    if (m_syncTimerCallbackId)
+    if (m_layerFlushTimerCallbackId)
         return;
 
     // We use a GLib timer because otherwise GTK+ event handling during
     // dragging can starve WebCore timers, which have a lower priority.
-    m_syncTimerCallbackId = g_timeout_add_full(GDK_PRIORITY_EVENTS, 0, reinterpret_cast<GSourceFunc>(syncLayersTimeoutCallback), this, 0);
+    m_layerFlushTimerCallbackId = g_timeout_add_full(GDK_PRIORITY_EVENTS, 0, reinterpret_cast<GSourceFunc>(flushAndRenderLayersCallback), this, 0);
 }
 
-void AcceleratedCompositingContext::syncLayersNow()
+bool AcceleratedCompositingContext::flushPendingLayerChanges()
 {
     if (m_rootGraphicsLayer)
         m_rootGraphicsLayer->syncCompositingStateForThisLayerOnly();
 
-    core(m_webView)->mainFrame()->view()->syncCompositingStateIncludingSubframes();
+    return core(m_webView)->mainFrame()->view()->syncCompositingStateIncludingSubframes();
 }
 
-void AcceleratedCompositingContext::syncLayersTimeout()
+void AcceleratedCompositingContext::flushAndRenderLayers()
 {
-    m_syncTimerCallbackId = 0;
-    syncLayersNow();
+    m_layerFlushTimerCallbackId = 0;
+    flushPendingLayerChanges();
     if (!m_rootGraphicsLayer)
         return;
 
-- 
1.8.0

