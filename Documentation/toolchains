TOOLCHAINS
==========

In software, a toolchain is the set of programming tools that are used to
create a product (typically another computer program or system of programs).
The tools may be used in a chain, so that the output of each tool becomes the
input for the next, but the term is used widely to refer to any set of linked
development tools.

A simple software development toolchain consists of a compiler and linker to
transform the source code into an executable program, libraries to provide
interfaces to the operating system, and a debugger.
	--
	[1] Wikipedia, Jul,1,2013 [http://en.wikipedia.org/wiki/Toolchain]

In PBS a toolchain provides the compiler, linker and debugger as well as some
tools and libraries needing a particular version.

If you like you can use your own toolchain (or a prebuild toolchain) by
properly configuring your pbs.mk. For details see:

	Documenation/user-configuration


Building a toolchain:
---------------------

Toolchains are a sort of "special" platforms. They are located in the
toolchains subdirectory and are already pre-configured.

To build a toolchain for the ARM architecture and uClibc support with the
EABI, use the following command:

	$ make O=toolchains/arm-unknown-linux-uclibceabi

A utility script exists which can be used for toolchain batch builds and also
archives the toolchain binaries for later use, or for deployment on other
systems. The script is "toolchains/build-toolchains". It reads lines of
toolchain names from standard input and builds the corresponding toolchain.
It keeps a log of all activities in "logs/<toolchain>.log". After the build is
finished, an tarball with the tools built can be found in "toolchains/archive"
(named after the toolchain and the binutils, gcc, Linux kernel and libc
versions). The script will automatically clean up after the build, so that
only the finished cross-compile tools remain in the "usr" subdirectory of the
toolchain base "toolchains/<toolchain>".

	$ echo arm-unknown-linux-uclibceabi | sh toolchains/build-toolchains

To completely remove a built toolchain, the "clean" command line argument can
be passed to the script:

	$ echo bfin-linux-uclibc | sh toolchains/build-toolchains clean

This will completely remove any temporary files and also the finished
binaries.

A list of all available toolchains can be obtained by running the
"toolchains/list-toolchains" script, which doesn't do much more than just list
the subdirectories in "toolchains" that contain toolchain configuration files.
The output of this script can be piped to the "build-toolchains" script to
build all available toolchains:

	$ sh toolchains/list-toolchains | sh toolchains/build-toolchains

Note that this may take a very long time to complete. A single toolchain needs
up to 2 hours to be build on a 2 GHz Intel Dual-Core machine. uclibc based
toolchains require less time.

Of course, all toolchains can also be removed like this:

	$ sh toolchains/list-toolchains | sh toolchains/build-toolchains clean

If you only want to build i686 toolchains, you could do something like this:

	$ sh toolchains/list-toolchains | grep '^i686' | \
		toolchains/build-toolchains


NOTES:
------

In future release of PBS the toolchains will be split and moved into a sperate
project.
