		 Platform Build System - HowTo
		===============================

This howto is intended to guide you through the basic usage of PBS. It has
been confirmed to work with Ubuntu 12.04 LTS and Fedora 20.

PBS builds everything from scratch. We try to keep the dependencies to the
host system as little as possible. But not all packages have complete
cross-compiling support, so it can happen that we miss something and the
build step uses files provided by the host-system (e.g header files or
documentation tools), or a host tool is missed.

In this case you can help yourself and install the package. Finally please
fill a bug (on github) or write a mail to inform us.

NOTE: We have splitted PBS lately, because some customers don't want to be
      made public. We are still working on this and it can happen that we
      have missed something, we have not tested all combinations.


Install required packages:
--------------------------

We assume you have made a default installation without selecting or
deselecting any packages.

   $ sudo apt-get install build-essential git quilt flex bison gawk
   $ sudo apt-get install libncurses5-dev autoconf fakeroot

These packages may not be required, but to avoid problems we recommend to
install them as well.

   $ sudo apt-get install texi2html texinfo help2man xsltproc
   $ sudo apt-get install docbook docbook-to-man docbook-xml docbook-xsl docbook-utils sgmls-doc sgml-base
   $ sudo apt-get install gperf device-tree-compiler intltool
   $ sudo apt-get install luadoc imagemagick libxml-simple-perl

To validate, that you have at least the essential tools required by PBS
installed, you should run the following command:

   $ ./configure


Fedora 23:
----------

Under Fedora 23 the perl version do not work for pbs. A version less or equal
than 5.20.3 is required.

To install multiple versions and use the required version perlbrew is a good way
to switch between to versions.

   $ perlbrew install perl-x.xx.x
   $ perlbrew use x.xx.x


Prepare your self:
------------------

Enter some directory where you want to place the build system in (like ~/devel)

   $ mkdir ~/devel
   $ cd ~/devel


Checkout the kernel:
--------------------

The kernel is normally located on github, but you can use you own repository
if you like.

   $ git clone https://github.com/avionic-design/linux-l4t.git kernel/linux.git

NOTE: Currently we have not merged the branches for Tegra2 and Tegra3. So you
      have to checkout the right branch.

   $ cd kernel/linux.git

For Tamonten T20 (Tegra2) use:
   $ git checkout -b tamonten/l4t-r16-2 origin/tamonten/l4t-r16-2

For Tamonten T30 (Tegra3) use:
   $ git checkout -b tamonten/l4t-r16-3 origin/tamonten/l4t-r16-3


Checkout PBS:
-------------

The latest version of PBS splits the base and the platform specific stuff
into separate repositories. So you have to use a recursive checkout.

   $ cd ~/devel
   $ git clone --recursive https://github.com/avionic-design/pbs-stage2

NOTE: Not all platforms (sub-repositories) are publicly accessible, so if you
      do not have the required access or you've been asked for your username,
      you can safely abort the checkout at this point.

Now prepare the build environment.

   $ cd pbs-stage2
   $ mkdir build download logs

To keep the repository nice and clean we add some directories to the ignore
list.

   $ cat >> .git/info/exclude << EOF
   build
   download
   logs
   EOF

Before you can start building, a user configuration file needs to be set
up. TOOLCHAIN_BASE_PATH shall contain the path to the toolchains to be
used for compiling. To avoid confusion an absolute path is recommended.

To avoid the need of root permissions, additional variables can be set
to prevent the usage of mount.

The user configuration file must be named "pbs.mk" and reside in the PBS
top level directory. Generate it with the following commands, replacing
the toolchain path with your own path (without brackets):

    $ cat >> pbs.mk << EOF
    export TOOLCHAIN_BASE_PATH=<path_to_toolchains>
    export INITRD_MOUNT_TMPFS=n
    export ROOTFS_MOUNT_TMPFS=n
    EOF


Build Toolchains (PBS Stage 1):
-------------------------------

The PBS is tested with toolchains built by pbs-stage1. You can find this
project here: https://github.com/avionic-design/pbs-stage1

NOTE: If you already have a toolchain (e.g from linaro) and you want use it,
      please do so at your own risk.


Build Platform (PBS Stage 2):
-----------------------------

The build steps can take a very long time depending on your system speed. Get
more coffee. For this howto we use the TEC platform as example. All other
platforms work more or less the same way. Some platforms are splitted into
initrd and rootfs. Other platforms do not use an initrd, so its just one step
instead of two.

Start with creating the platform build output directories:

   $ mkdir -p build/initrd build/rootfs

The platform configuration files are located in the configs directory found
in each platforms repository: <pbs-dir>/platforms/<repository>/configs.

For now we load the default configuration to build an initrd image for the
TEC-NG platform from the avionic-design platform repository:

   $ make O=build/initrd PLATFORM=avionic-design tec-ng-initrd_defconfig

Optional: Change package selection or adjust kernel path.

   $ nice make O=build/initrd menuconfig
        Packages -->
            Operating System Kernel -->
                (...) path to local directory
    Save and Exit

Now build the platform as mentioned, this step can take some time depending
on the selected packages and the speed of your computer.

   $ nice make O=build/initrd

Once all the packages have been built, create the initrd filesystem:

   $ fakeroot nice make O=build/initrd initrd

HINT: As a speedup measure you may want to check which variant of fakeroot
      is used. The SYSV implementation is much faster than the TCP one.
      Check the fake* symlinks in /usr/bin - both faked and fakeroot itself
      must point to the same variant. If anything goes wrong in your
      freshly built embedded Linux regarding permissions, be sure to
      try fakeroot-tcp.

For the rootfs the procedure is similar, but the build will take a lot more
time because we have a lot more packages to build. So lets start and load the
default package selection for the root filesystem.

   $ make O=build/rootfs PLATFORM=avionic-design tec-ng-rootfs_defconfig

Optional: Same as above.

   $ nice make O=build/rootfs menuconfig

And build the root filesystem

   $ nice make O=build/rootfs
   $ fakeroot nice make O=build/rootfs rootfs


Prepare a SD card:
-------------------

Put a SD card in you cardreader, partition it and create the filesystems
using the following commands:

   $ pushd platforms/avionic-design/plutux
   $ sudo ./make-sdcard /dev/sdX
   $ popd

You only need to do this once (despite the misleading path, the partition
script can be used for other platforms too).

Now copy the kernel-initrd and rootfs to the SD card.

   $ sudo mount /dev/sdX1 /mnt
   $ sudo cp build/rootfs/rootfs.img /mnt
   $ sudo cp build/initrd/uImage /mnt/boot

Last but not least you need to create a uboot script:

   $ cat >> boot.cmd << EOF
   >> setenv bootargs mem=1024M console=ttyS0,115200n8 root=LABEL=boot:/rootfs.img rootfstype=squashfs rootwait ro
   >> setenv loadaddr 0x90000000
   >> ext2load mmc 1:1 ${loadaddr} /boot/uImage
   >> bootm
   >> EOF
   $ mkimage -A arm -O linux -T script -C none -a 0 -e 0 -n "PBS rootfs sd-card" -d boot.cmd boot.scr
   $ sudo cp boot.scr /mnt/boot
   $ sudo umount /dev/sdX1

Note that especially the last step is very specific for the tec-ng-T30
platform, you may be required to use a different procedure for your device.

Now you can put the SD card into the device and boot your brand new system!
