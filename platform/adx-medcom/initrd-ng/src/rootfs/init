#!/bin/sh

. /lib/lsb/init-functions

mkdir -p /etc
touch /etc/fstab
touch /etc/mdev.conf

log_action_begin_msg "Mounting /proc filesystem"
mkdir -p /proc
mount -t proc none /proc
log_action_end_msg $?

log_action_begin_msg "Mounting /sys filesystem"
mkdir -p /sys
mount -t sysfs none /sys
log_action_end_msg $?

log_action_begin_msg "Populating /dev filesystem"
mdev -s
sleep 1
mdev -s
log_action_end_msg $?

cmdline=`cat /proc/cmdline`
init=/sbin/init
root=/dev/mmcblk0p5:/rootfs.img
disk_mp=/media/sd-card
root_mp=/root
ro=n

# parsing kernel command line
for arg in $cmdline; do
	case $arg in
		root=*)
			root=`echo $arg | cut -d = -f 2`
			;;

		init=*)
			init=`echo $arg | cut -d = -f 2`
			;;

		remount-ro)
			ro=remount
			;;

		ro)
			ro=y
			;;

		*)
			;;
	esac
done

root_dev=`echo $root | cut -d : -f 1`
root_img=`echo $root | cut -d : -f 2`

if [ "x$root_dev" = "x$root_img" ]; then
	root_img=
fi

# mount target root filesystem
log_action_begin_msg "Mounting root filesystem: $root_mp"
mkdir -p "$disk_mp"

# mount the rootfs writeable for now
if [ "x$root_img" = "x" ]; then
	if [ "x$ro" = "xy" ]; then
		mount -o ro "$root_dev" "$disk_mp"
	else
		mount "$root_dev" "$disk_mp"
	fi

	root_mp="$disk_mp"
else
	if [ "x$ro" = "xy" ]; then
		mount -o ro      "$root_dev" "$disk_mp"
		mount -o ro,loop "${disk_mp}/${root_img}" "$root_mp"
	else
		mount         "$root_dev" "$disk_mp"
		mount -o loop "${disk_mp}${root_img}" "$root_mp"
	fi
fi

log_action_end_msg $?

# mount /dev filesystem
log_action_begin_msg "Mounting /dev"
mount -o rw,mode=0755,size=256K -t tmpfs udev "$root_mp/dev"
log_action_end_msg $?

# create devices in the new root filesystem
log_action_begin_msg "Creating devices"
[ -e "$root_mp/dev/console" ] || mknod "$root_mp/dev/console" c 5 1
log_action_end_msg $?

if [ "x$root_img" != "x" ]; then
	# move SD-Card partition to the real filesystem
	mkdir -p "${root_mp}${disk_mp}"
	mount -o move "$disk_mp" "${root_mp}${disk_mp}"
fi

# check for init in target filesystem
while [ ! -x "${root_mp}${init}" ]; do
	panic "Target filesystem doesn't have $init"
done

# remount the rootfs read-only
if [ "x$ro" = "xremount" ]; then
	log_action_begin_msg "Remounting root filesystem read-only"

	if [ "x$root_img" = "x" ]; then
		mount -o remount,ro "$disk_mp"
	else
		mount -o remount,ro "$root_mp"
	fi

	log_action_end_msg $?
fi

# move virtual filesystems over to the real filesystem
mount -o move /sys  "$root_mp/sys"
mount -o move /proc "$root_mp/proc"

exec switch_root "$root_mp" "$init" "$@"

